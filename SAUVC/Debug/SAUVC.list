
SAUVC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e90  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003018  08003018  00013018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003028  08003028  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003028  08003028  00013028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003030  08003030  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003030  08003030  00013030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003034  08003034  00013034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000188  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000194  20000194  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000973b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000155e  00000000  00000000  00029777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b8  00000000  00000000  0002acd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000910  00000000  00000000  0002b690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001faac  00000000  00000000  0002bfa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a098  00000000  00000000  0004ba4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c45de  00000000  00000000  00055ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011a0c2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002868  00000000  00000000  0011a118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003000 	.word	0x08003000

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003000 	.word	0x08003000

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004c4:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <HAL_Init+0x40>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a0d      	ldr	r2, [pc, #52]	; (8000500 <HAL_Init+0x40>)
 80004ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d0:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <HAL_Init+0x40>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a0a      	ldr	r2, [pc, #40]	; (8000500 <HAL_Init+0x40>)
 80004d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004dc:	4b08      	ldr	r3, [pc, #32]	; (8000500 <HAL_Init+0x40>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a07      	ldr	r2, [pc, #28]	; (8000500 <HAL_Init+0x40>)
 80004e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004e8:	2003      	movs	r0, #3
 80004ea:	f000 f94f 	bl	800078c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004ee:	2000      	movs	r0, #0
 80004f0:	f000 f808 	bl	8000504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004f4:	f002 fba2 	bl	8002c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004f8:	2300      	movs	r3, #0
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40023c00 	.word	0x40023c00

08000504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800050c:	4b12      	ldr	r3, [pc, #72]	; (8000558 <HAL_InitTick+0x54>)
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <HAL_InitTick+0x58>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	4619      	mov	r1, r3
 8000516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800051a:	fbb3 f3f1 	udiv	r3, r3, r1
 800051e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000522:	4618      	mov	r0, r3
 8000524:	f000 f967 	bl	80007f6 <HAL_SYSTICK_Config>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800052e:	2301      	movs	r3, #1
 8000530:	e00e      	b.n	8000550 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2b0f      	cmp	r3, #15
 8000536:	d80a      	bhi.n	800054e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000538:	2200      	movs	r2, #0
 800053a:	6879      	ldr	r1, [r7, #4]
 800053c:	f04f 30ff 	mov.w	r0, #4294967295
 8000540:	f000 f92f 	bl	80007a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000544:	4a06      	ldr	r2, [pc, #24]	; (8000560 <HAL_InitTick+0x5c>)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800054a:	2300      	movs	r3, #0
 800054c:	e000      	b.n	8000550 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800054e:	2301      	movs	r3, #1
}
 8000550:	4618      	mov	r0, r3
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000008 	.word	0x20000008
 800055c:	20000004 	.word	0x20000004
 8000560:	20000000 	.word	0x20000000

08000564 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <HAL_IncTick+0x20>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	461a      	mov	r2, r3
 800056e:	4b06      	ldr	r3, [pc, #24]	; (8000588 <HAL_IncTick+0x24>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4413      	add	r3, r2
 8000574:	4a04      	ldr	r2, [pc, #16]	; (8000588 <HAL_IncTick+0x24>)
 8000576:	6013      	str	r3, [r2, #0]
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	20000004 	.word	0x20000004
 8000588:	20000028 	.word	0x20000028

0800058c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  return uwTick;
 8000590:	4b03      	ldr	r3, [pc, #12]	; (80005a0 <HAL_GetTick+0x14>)
 8000592:	681b      	ldr	r3, [r3, #0]
}
 8000594:	4618      	mov	r0, r3
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000028 	.word	0x20000028

080005a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005ac:	f7ff ffee 	bl	800058c <HAL_GetTick>
 80005b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005bc:	d005      	beq.n	80005ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <HAL_Delay+0x44>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	461a      	mov	r2, r3
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	4413      	add	r3, r2
 80005c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005ca:	bf00      	nop
 80005cc:	f7ff ffde 	bl	800058c <HAL_GetTick>
 80005d0:	4602      	mov	r2, r0
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	1ad3      	subs	r3, r2, r3
 80005d6:	68fa      	ldr	r2, [r7, #12]
 80005d8:	429a      	cmp	r2, r3
 80005da:	d8f7      	bhi.n	80005cc <HAL_Delay+0x28>
  {
  }
}
 80005dc:	bf00      	nop
 80005de:	bf00      	nop
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000004 	.word	0x20000004

080005ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	f003 0307 	and.w	r3, r3, #7
 80005fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <__NVIC_SetPriorityGrouping+0x44>)
 80005fe:	68db      	ldr	r3, [r3, #12]
 8000600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000602:	68ba      	ldr	r2, [r7, #8]
 8000604:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000608:	4013      	ands	r3, r2
 800060a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000614:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800061c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800061e:	4a04      	ldr	r2, [pc, #16]	; (8000630 <__NVIC_SetPriorityGrouping+0x44>)
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	60d3      	str	r3, [r2, #12]
}
 8000624:	bf00      	nop
 8000626:	3714      	adds	r7, #20
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	e000ed00 	.word	0xe000ed00

08000634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000638:	4b04      	ldr	r3, [pc, #16]	; (800064c <__NVIC_GetPriorityGrouping+0x18>)
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	0a1b      	lsrs	r3, r3, #8
 800063e:	f003 0307 	and.w	r3, r3, #7
}
 8000642:	4618      	mov	r0, r3
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	e000ed00 	.word	0xe000ed00

08000650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065e:	2b00      	cmp	r3, #0
 8000660:	db0b      	blt.n	800067a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	f003 021f 	and.w	r2, r3, #31
 8000668:	4907      	ldr	r1, [pc, #28]	; (8000688 <__NVIC_EnableIRQ+0x38>)
 800066a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066e:	095b      	lsrs	r3, r3, #5
 8000670:	2001      	movs	r0, #1
 8000672:	fa00 f202 	lsl.w	r2, r0, r2
 8000676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800067a:	bf00      	nop
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	e000e100 	.word	0xe000e100

0800068c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	6039      	str	r1, [r7, #0]
 8000696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069c:	2b00      	cmp	r3, #0
 800069e:	db0a      	blt.n	80006b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	490c      	ldr	r1, [pc, #48]	; (80006d8 <__NVIC_SetPriority+0x4c>)
 80006a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006aa:	0112      	lsls	r2, r2, #4
 80006ac:	b2d2      	uxtb	r2, r2
 80006ae:	440b      	add	r3, r1
 80006b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b4:	e00a      	b.n	80006cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	b2da      	uxtb	r2, r3
 80006ba:	4908      	ldr	r1, [pc, #32]	; (80006dc <__NVIC_SetPriority+0x50>)
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	f003 030f 	and.w	r3, r3, #15
 80006c2:	3b04      	subs	r3, #4
 80006c4:	0112      	lsls	r2, r2, #4
 80006c6:	b2d2      	uxtb	r2, r2
 80006c8:	440b      	add	r3, r1
 80006ca:	761a      	strb	r2, [r3, #24]
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000e100 	.word	0xe000e100
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b089      	sub	sp, #36	; 0x24
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	f003 0307 	and.w	r3, r3, #7
 80006f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f4:	69fb      	ldr	r3, [r7, #28]
 80006f6:	f1c3 0307 	rsb	r3, r3, #7
 80006fa:	2b04      	cmp	r3, #4
 80006fc:	bf28      	it	cs
 80006fe:	2304      	movcs	r3, #4
 8000700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000702:	69fb      	ldr	r3, [r7, #28]
 8000704:	3304      	adds	r3, #4
 8000706:	2b06      	cmp	r3, #6
 8000708:	d902      	bls.n	8000710 <NVIC_EncodePriority+0x30>
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	3b03      	subs	r3, #3
 800070e:	e000      	b.n	8000712 <NVIC_EncodePriority+0x32>
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000714:	f04f 32ff 	mov.w	r2, #4294967295
 8000718:	69bb      	ldr	r3, [r7, #24]
 800071a:	fa02 f303 	lsl.w	r3, r2, r3
 800071e:	43da      	mvns	r2, r3
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	401a      	ands	r2, r3
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000728:	f04f 31ff 	mov.w	r1, #4294967295
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	fa01 f303 	lsl.w	r3, r1, r3
 8000732:	43d9      	mvns	r1, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000738:	4313      	orrs	r3, r2
         );
}
 800073a:	4618      	mov	r0, r3
 800073c:	3724      	adds	r7, #36	; 0x24
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
	...

08000748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3b01      	subs	r3, #1
 8000754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000758:	d301      	bcc.n	800075e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075a:	2301      	movs	r3, #1
 800075c:	e00f      	b.n	800077e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800075e:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <SysTick_Config+0x40>)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3b01      	subs	r3, #1
 8000764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000766:	210f      	movs	r1, #15
 8000768:	f04f 30ff 	mov.w	r0, #4294967295
 800076c:	f7ff ff8e 	bl	800068c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <SysTick_Config+0x40>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000776:	4b04      	ldr	r3, [pc, #16]	; (8000788 <SysTick_Config+0x40>)
 8000778:	2207      	movs	r2, #7
 800077a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	e000e010 	.word	0xe000e010

0800078c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f7ff ff29 	bl	80005ec <__NVIC_SetPriorityGrouping>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b086      	sub	sp, #24
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	4603      	mov	r3, r0
 80007aa:	60b9      	str	r1, [r7, #8]
 80007ac:	607a      	str	r2, [r7, #4]
 80007ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b4:	f7ff ff3e 	bl	8000634 <__NVIC_GetPriorityGrouping>
 80007b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	68b9      	ldr	r1, [r7, #8]
 80007be:	6978      	ldr	r0, [r7, #20]
 80007c0:	f7ff ff8e 	bl	80006e0 <NVIC_EncodePriority>
 80007c4:	4602      	mov	r2, r0
 80007c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ca:	4611      	mov	r1, r2
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff ff5d 	bl	800068c <__NVIC_SetPriority>
}
 80007d2:	bf00      	nop
 80007d4:	3718      	adds	r7, #24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ff31 	bl	8000650 <__NVIC_EnableIRQ>
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f7ff ffa2 	bl	8000748 <SysTick_Config>
 8000804:	4603      	mov	r3, r0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000810:	b480      	push	{r7}
 8000812:	b089      	sub	sp, #36	; 0x24
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
 800082a:	e16b      	b.n	8000b04 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800082c:	2201      	movs	r2, #1
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	fa02 f303 	lsl.w	r3, r2, r3
 8000834:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	697a      	ldr	r2, [r7, #20]
 800083c:	4013      	ands	r3, r2
 800083e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000840:	693a      	ldr	r2, [r7, #16]
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	429a      	cmp	r2, r3
 8000846:	f040 815a 	bne.w	8000afe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	f003 0303 	and.w	r3, r3, #3
 8000852:	2b01      	cmp	r3, #1
 8000854:	d005      	beq.n	8000862 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800085e:	2b02      	cmp	r3, #2
 8000860:	d130      	bne.n	80008c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	689b      	ldr	r3, [r3, #8]
 8000866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000868:	69fb      	ldr	r3, [r7, #28]
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	2203      	movs	r2, #3
 800086e:	fa02 f303 	lsl.w	r3, r2, r3
 8000872:	43db      	mvns	r3, r3
 8000874:	69ba      	ldr	r2, [r7, #24]
 8000876:	4013      	ands	r3, r2
 8000878:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	68da      	ldr	r2, [r3, #12]
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	fa02 f303 	lsl.w	r3, r2, r3
 8000886:	69ba      	ldr	r2, [r7, #24]
 8000888:	4313      	orrs	r3, r2
 800088a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	69ba      	ldr	r2, [r7, #24]
 8000890:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000898:	2201      	movs	r2, #1
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
 80008a0:	43db      	mvns	r3, r3
 80008a2:	69ba      	ldr	r2, [r7, #24]
 80008a4:	4013      	ands	r3, r2
 80008a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	091b      	lsrs	r3, r3, #4
 80008ae:	f003 0201 	and.w	r2, r3, #1
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	fa02 f303 	lsl.w	r3, r2, r3
 80008b8:	69ba      	ldr	r2, [r7, #24]
 80008ba:	4313      	orrs	r3, r2
 80008bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	69ba      	ldr	r2, [r7, #24]
 80008c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	f003 0303 	and.w	r3, r3, #3
 80008cc:	2b03      	cmp	r3, #3
 80008ce:	d017      	beq.n	8000900 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	2203      	movs	r2, #3
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	43db      	mvns	r3, r3
 80008e2:	69ba      	ldr	r2, [r7, #24]
 80008e4:	4013      	ands	r3, r2
 80008e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	689a      	ldr	r2, [r3, #8]
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	69ba      	ldr	r2, [r7, #24]
 80008f6:	4313      	orrs	r3, r2
 80008f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	69ba      	ldr	r2, [r7, #24]
 80008fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	f003 0303 	and.w	r3, r3, #3
 8000908:	2b02      	cmp	r3, #2
 800090a:	d123      	bne.n	8000954 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800090c:	69fb      	ldr	r3, [r7, #28]
 800090e:	08da      	lsrs	r2, r3, #3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3208      	adds	r2, #8
 8000914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000918:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	f003 0307 	and.w	r3, r3, #7
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	220f      	movs	r2, #15
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	43db      	mvns	r3, r3
 800092a:	69ba      	ldr	r2, [r7, #24]
 800092c:	4013      	ands	r3, r2
 800092e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	691a      	ldr	r2, [r3, #16]
 8000934:	69fb      	ldr	r3, [r7, #28]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	69ba      	ldr	r2, [r7, #24]
 8000942:	4313      	orrs	r3, r2
 8000944:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	08da      	lsrs	r2, r3, #3
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	3208      	adds	r2, #8
 800094e:	69b9      	ldr	r1, [r7, #24]
 8000950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	2203      	movs	r2, #3
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	43db      	mvns	r3, r3
 8000966:	69ba      	ldr	r2, [r7, #24]
 8000968:	4013      	ands	r3, r2
 800096a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	f003 0203 	and.w	r2, r3, #3
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
 800097c:	69ba      	ldr	r2, [r7, #24]
 800097e:	4313      	orrs	r3, r2
 8000980:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	69ba      	ldr	r2, [r7, #24]
 8000986:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000990:	2b00      	cmp	r3, #0
 8000992:	f000 80b4 	beq.w	8000afe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	4b60      	ldr	r3, [pc, #384]	; (8000b1c <HAL_GPIO_Init+0x30c>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	4a5f      	ldr	r2, [pc, #380]	; (8000b1c <HAL_GPIO_Init+0x30c>)
 80009a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a4:	6453      	str	r3, [r2, #68]	; 0x44
 80009a6:	4b5d      	ldr	r3, [pc, #372]	; (8000b1c <HAL_GPIO_Init+0x30c>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009b2:	4a5b      	ldr	r2, [pc, #364]	; (8000b20 <HAL_GPIO_Init+0x310>)
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	089b      	lsrs	r3, r3, #2
 80009b8:	3302      	adds	r3, #2
 80009ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	f003 0303 	and.w	r3, r3, #3
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	220f      	movs	r2, #15
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	43db      	mvns	r3, r3
 80009d0:	69ba      	ldr	r2, [r7, #24]
 80009d2:	4013      	ands	r3, r2
 80009d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a52      	ldr	r2, [pc, #328]	; (8000b24 <HAL_GPIO_Init+0x314>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d02b      	beq.n	8000a36 <HAL_GPIO_Init+0x226>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a51      	ldr	r2, [pc, #324]	; (8000b28 <HAL_GPIO_Init+0x318>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d025      	beq.n	8000a32 <HAL_GPIO_Init+0x222>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a50      	ldr	r2, [pc, #320]	; (8000b2c <HAL_GPIO_Init+0x31c>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d01f      	beq.n	8000a2e <HAL_GPIO_Init+0x21e>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a4f      	ldr	r2, [pc, #316]	; (8000b30 <HAL_GPIO_Init+0x320>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d019      	beq.n	8000a2a <HAL_GPIO_Init+0x21a>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a4e      	ldr	r2, [pc, #312]	; (8000b34 <HAL_GPIO_Init+0x324>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d013      	beq.n	8000a26 <HAL_GPIO_Init+0x216>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a4d      	ldr	r2, [pc, #308]	; (8000b38 <HAL_GPIO_Init+0x328>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d00d      	beq.n	8000a22 <HAL_GPIO_Init+0x212>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a4c      	ldr	r2, [pc, #304]	; (8000b3c <HAL_GPIO_Init+0x32c>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d007      	beq.n	8000a1e <HAL_GPIO_Init+0x20e>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a4b      	ldr	r2, [pc, #300]	; (8000b40 <HAL_GPIO_Init+0x330>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d101      	bne.n	8000a1a <HAL_GPIO_Init+0x20a>
 8000a16:	2307      	movs	r3, #7
 8000a18:	e00e      	b.n	8000a38 <HAL_GPIO_Init+0x228>
 8000a1a:	2308      	movs	r3, #8
 8000a1c:	e00c      	b.n	8000a38 <HAL_GPIO_Init+0x228>
 8000a1e:	2306      	movs	r3, #6
 8000a20:	e00a      	b.n	8000a38 <HAL_GPIO_Init+0x228>
 8000a22:	2305      	movs	r3, #5
 8000a24:	e008      	b.n	8000a38 <HAL_GPIO_Init+0x228>
 8000a26:	2304      	movs	r3, #4
 8000a28:	e006      	b.n	8000a38 <HAL_GPIO_Init+0x228>
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	e004      	b.n	8000a38 <HAL_GPIO_Init+0x228>
 8000a2e:	2302      	movs	r3, #2
 8000a30:	e002      	b.n	8000a38 <HAL_GPIO_Init+0x228>
 8000a32:	2301      	movs	r3, #1
 8000a34:	e000      	b.n	8000a38 <HAL_GPIO_Init+0x228>
 8000a36:	2300      	movs	r3, #0
 8000a38:	69fa      	ldr	r2, [r7, #28]
 8000a3a:	f002 0203 	and.w	r2, r2, #3
 8000a3e:	0092      	lsls	r2, r2, #2
 8000a40:	4093      	lsls	r3, r2
 8000a42:	69ba      	ldr	r2, [r7, #24]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a48:	4935      	ldr	r1, [pc, #212]	; (8000b20 <HAL_GPIO_Init+0x310>)
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	089b      	lsrs	r3, r3, #2
 8000a4e:	3302      	adds	r3, #2
 8000a50:	69ba      	ldr	r2, [r7, #24]
 8000a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a56:	4b3b      	ldr	r3, [pc, #236]	; (8000b44 <HAL_GPIO_Init+0x334>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	43db      	mvns	r3, r3
 8000a60:	69ba      	ldr	r2, [r7, #24]
 8000a62:	4013      	ands	r3, r2
 8000a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d003      	beq.n	8000a7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a72:	69ba      	ldr	r2, [r7, #24]
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a7a:	4a32      	ldr	r2, [pc, #200]	; (8000b44 <HAL_GPIO_Init+0x334>)
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a80:	4b30      	ldr	r3, [pc, #192]	; (8000b44 <HAL_GPIO_Init+0x334>)
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	69ba      	ldr	r2, [r7, #24]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d003      	beq.n	8000aa4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000a9c:	69ba      	ldr	r2, [r7, #24]
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000aa4:	4a27      	ldr	r2, [pc, #156]	; (8000b44 <HAL_GPIO_Init+0x334>)
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aaa:	4b26      	ldr	r3, [pc, #152]	; (8000b44 <HAL_GPIO_Init+0x334>)
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	43db      	mvns	r3, r3
 8000ab4:	69ba      	ldr	r2, [r7, #24]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d003      	beq.n	8000ace <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ac6:	69ba      	ldr	r2, [r7, #24]
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ace:	4a1d      	ldr	r2, [pc, #116]	; (8000b44 <HAL_GPIO_Init+0x334>)
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ad4:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <HAL_GPIO_Init+0x334>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	43db      	mvns	r3, r3
 8000ade:	69ba      	ldr	r2, [r7, #24]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d003      	beq.n	8000af8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000af0:	69ba      	ldr	r2, [r7, #24]
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000af8:	4a12      	ldr	r2, [pc, #72]	; (8000b44 <HAL_GPIO_Init+0x334>)
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	3301      	adds	r3, #1
 8000b02:	61fb      	str	r3, [r7, #28]
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	2b0f      	cmp	r3, #15
 8000b08:	f67f ae90 	bls.w	800082c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	bf00      	nop
 8000b10:	3724      	adds	r7, #36	; 0x24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40013800 	.word	0x40013800
 8000b24:	40020000 	.word	0x40020000
 8000b28:	40020400 	.word	0x40020400
 8000b2c:	40020800 	.word	0x40020800
 8000b30:	40020c00 	.word	0x40020c00
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40021400 	.word	0x40021400
 8000b3c:	40021800 	.word	0x40021800
 8000b40:	40021c00 	.word	0x40021c00
 8000b44:	40013c00 	.word	0x40013c00

08000b48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d101      	bne.n	8000b5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e264      	b.n	8001024 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d075      	beq.n	8000c52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b66:	4ba3      	ldr	r3, [pc, #652]	; (8000df4 <HAL_RCC_OscConfig+0x2ac>)
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	f003 030c 	and.w	r3, r3, #12
 8000b6e:	2b04      	cmp	r3, #4
 8000b70:	d00c      	beq.n	8000b8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b72:	4ba0      	ldr	r3, [pc, #640]	; (8000df4 <HAL_RCC_OscConfig+0x2ac>)
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b7a:	2b08      	cmp	r3, #8
 8000b7c:	d112      	bne.n	8000ba4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b7e:	4b9d      	ldr	r3, [pc, #628]	; (8000df4 <HAL_RCC_OscConfig+0x2ac>)
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b8a:	d10b      	bne.n	8000ba4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b8c:	4b99      	ldr	r3, [pc, #612]	; (8000df4 <HAL_RCC_OscConfig+0x2ac>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d05b      	beq.n	8000c50 <HAL_RCC_OscConfig+0x108>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d157      	bne.n	8000c50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	e23f      	b.n	8001024 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bac:	d106      	bne.n	8000bbc <HAL_RCC_OscConfig+0x74>
 8000bae:	4b91      	ldr	r3, [pc, #580]	; (8000df4 <HAL_RCC_OscConfig+0x2ac>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a90      	ldr	r2, [pc, #576]	; (8000df4 <HAL_RCC_OscConfig+0x2ac>)
 8000bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bb8:	6013      	str	r3, [r2, #0]
 8000bba:	e01d      	b.n	8000bf8 <HAL_RCC_OscConfig+0xb0>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bc4:	d10c      	bne.n	8000be0 <HAL_RCC_OscConfig+0x98>
 8000bc6:	4b8b      	ldr	r3, [pc, #556]	; (8000df4 <HAL_RCC_OscConfig+0x2ac>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a8a      	ldr	r2, [pc, #552]	; (8000df4 <HAL_RCC_OscConfig+0x2ac>)
 8000bcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bd0:	6013      	str	r3, [r2, #0]
 8000bd2:	4b88      	ldr	r3, [pc, #544]	; (8000df4 <HAL_RCC_OscConfig+0x2ac>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a87      	ldr	r2, [pc, #540]	; (8000df4 <HAL_RCC_OscConfig+0x2ac>)
 8000bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bdc:	6013      	str	r3, [r2, #0]
 8000bde:	e00b      	b.n	8000bf8 <HAL_RCC_OscConfig+0xb0>
 8000be0:	4b84      	ldr	r3, [pc, #528]	; (8000df4 <HAL_RCC_OscConfig+0x2ac>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a83      	ldr	r2, [pc, #524]	; (8000df4 <HAL_RCC_OscConfig+0x2ac>)
 8000be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bea:	6013      	str	r3, [r2, #0]
 8000bec:	4b81      	ldr	r3, [pc, #516]	; (8000df4 <HAL_RCC_OscConfig+0x2ac>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a80      	ldr	r2, [pc, #512]	; (8000df4 <HAL_RCC_OscConfig+0x2ac>)
 8000bf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d013      	beq.n	8000c28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c00:	f7ff fcc4 	bl	800058c <HAL_GetTick>
 8000c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c06:	e008      	b.n	8000c1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c08:	f7ff fcc0 	bl	800058c <HAL_GetTick>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	2b64      	cmp	r3, #100	; 0x64
 8000c14:	d901      	bls.n	8000c1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c16:	2303      	movs	r3, #3
 8000c18:	e204      	b.n	8001024 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c1a:	4b76      	ldr	r3, [pc, #472]	; (8000df4 <HAL_RCC_OscConfig+0x2ac>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d0f0      	beq.n	8000c08 <HAL_RCC_OscConfig+0xc0>
 8000c26:	e014      	b.n	8000c52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c28:	f7ff fcb0 	bl	800058c <HAL_GetTick>
 8000c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c2e:	e008      	b.n	8000c42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c30:	f7ff fcac 	bl	800058c <HAL_GetTick>
 8000c34:	4602      	mov	r2, r0
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	2b64      	cmp	r3, #100	; 0x64
 8000c3c:	d901      	bls.n	8000c42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	e1f0      	b.n	8001024 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c42:	4b6c      	ldr	r3, [pc, #432]	; (8000df4 <HAL_RCC_OscConfig+0x2ac>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d1f0      	bne.n	8000c30 <HAL_RCC_OscConfig+0xe8>
 8000c4e:	e000      	b.n	8000c52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d063      	beq.n	8000d26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c5e:	4b65      	ldr	r3, [pc, #404]	; (8000df4 <HAL_RCC_OscConfig+0x2ac>)
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	f003 030c 	and.w	r3, r3, #12
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d00b      	beq.n	8000c82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c6a:	4b62      	ldr	r3, [pc, #392]	; (8000df4 <HAL_RCC_OscConfig+0x2ac>)
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c72:	2b08      	cmp	r3, #8
 8000c74:	d11c      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c76:	4b5f      	ldr	r3, [pc, #380]	; (8000df4 <HAL_RCC_OscConfig+0x2ac>)
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d116      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c82:	4b5c      	ldr	r3, [pc, #368]	; (8000df4 <HAL_RCC_OscConfig+0x2ac>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d005      	beq.n	8000c9a <HAL_RCC_OscConfig+0x152>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d001      	beq.n	8000c9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e1c4      	b.n	8001024 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c9a:	4b56      	ldr	r3, [pc, #344]	; (8000df4 <HAL_RCC_OscConfig+0x2ac>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	691b      	ldr	r3, [r3, #16]
 8000ca6:	00db      	lsls	r3, r3, #3
 8000ca8:	4952      	ldr	r1, [pc, #328]	; (8000df4 <HAL_RCC_OscConfig+0x2ac>)
 8000caa:	4313      	orrs	r3, r2
 8000cac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cae:	e03a      	b.n	8000d26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d020      	beq.n	8000cfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cb8:	4b4f      	ldr	r3, [pc, #316]	; (8000df8 <HAL_RCC_OscConfig+0x2b0>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cbe:	f7ff fc65 	bl	800058c <HAL_GetTick>
 8000cc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cc4:	e008      	b.n	8000cd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cc6:	f7ff fc61 	bl	800058c <HAL_GetTick>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d901      	bls.n	8000cd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	e1a5      	b.n	8001024 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cd8:	4b46      	ldr	r3, [pc, #280]	; (8000df4 <HAL_RCC_OscConfig+0x2ac>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f003 0302 	and.w	r3, r3, #2
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d0f0      	beq.n	8000cc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ce4:	4b43      	ldr	r3, [pc, #268]	; (8000df4 <HAL_RCC_OscConfig+0x2ac>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	691b      	ldr	r3, [r3, #16]
 8000cf0:	00db      	lsls	r3, r3, #3
 8000cf2:	4940      	ldr	r1, [pc, #256]	; (8000df4 <HAL_RCC_OscConfig+0x2ac>)
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	600b      	str	r3, [r1, #0]
 8000cf8:	e015      	b.n	8000d26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cfa:	4b3f      	ldr	r3, [pc, #252]	; (8000df8 <HAL_RCC_OscConfig+0x2b0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d00:	f7ff fc44 	bl	800058c <HAL_GetTick>
 8000d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d06:	e008      	b.n	8000d1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d08:	f7ff fc40 	bl	800058c <HAL_GetTick>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d901      	bls.n	8000d1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000d16:	2303      	movs	r3, #3
 8000d18:	e184      	b.n	8001024 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d1a:	4b36      	ldr	r3, [pc, #216]	; (8000df4 <HAL_RCC_OscConfig+0x2ac>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d1f0      	bne.n	8000d08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f003 0308 	and.w	r3, r3, #8
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d030      	beq.n	8000d94 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d016      	beq.n	8000d68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d3a:	4b30      	ldr	r3, [pc, #192]	; (8000dfc <HAL_RCC_OscConfig+0x2b4>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d40:	f7ff fc24 	bl	800058c <HAL_GetTick>
 8000d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d46:	e008      	b.n	8000d5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d48:	f7ff fc20 	bl	800058c <HAL_GetTick>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d901      	bls.n	8000d5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000d56:	2303      	movs	r3, #3
 8000d58:	e164      	b.n	8001024 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d5a:	4b26      	ldr	r3, [pc, #152]	; (8000df4 <HAL_RCC_OscConfig+0x2ac>)
 8000d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d0f0      	beq.n	8000d48 <HAL_RCC_OscConfig+0x200>
 8000d66:	e015      	b.n	8000d94 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d68:	4b24      	ldr	r3, [pc, #144]	; (8000dfc <HAL_RCC_OscConfig+0x2b4>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d6e:	f7ff fc0d 	bl	800058c <HAL_GetTick>
 8000d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d74:	e008      	b.n	8000d88 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d76:	f7ff fc09 	bl	800058c <HAL_GetTick>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d901      	bls.n	8000d88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000d84:	2303      	movs	r3, #3
 8000d86:	e14d      	b.n	8001024 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d88:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <HAL_RCC_OscConfig+0x2ac>)
 8000d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d8c:	f003 0302 	and.w	r3, r3, #2
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d1f0      	bne.n	8000d76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f003 0304 	and.w	r3, r3, #4
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	f000 80a0 	beq.w	8000ee2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000da2:	2300      	movs	r3, #0
 8000da4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000da6:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <HAL_RCC_OscConfig+0x2ac>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d10f      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <HAL_RCC_OscConfig+0x2ac>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	4a0e      	ldr	r2, [pc, #56]	; (8000df4 <HAL_RCC_OscConfig+0x2ac>)
 8000dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <HAL_RCC_OscConfig+0x2ac>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <HAL_RCC_OscConfig+0x2b8>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d121      	bne.n	8000e22 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dde:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <HAL_RCC_OscConfig+0x2b8>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <HAL_RCC_OscConfig+0x2b8>)
 8000de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dea:	f7ff fbcf 	bl	800058c <HAL_GetTick>
 8000dee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000df0:	e011      	b.n	8000e16 <HAL_RCC_OscConfig+0x2ce>
 8000df2:	bf00      	nop
 8000df4:	40023800 	.word	0x40023800
 8000df8:	42470000 	.word	0x42470000
 8000dfc:	42470e80 	.word	0x42470e80
 8000e00:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e04:	f7ff fbc2 	bl	800058c <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d901      	bls.n	8000e16 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000e12:	2303      	movs	r3, #3
 8000e14:	e106      	b.n	8001024 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e16:	4b85      	ldr	r3, [pc, #532]	; (800102c <HAL_RCC_OscConfig+0x4e4>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d0f0      	beq.n	8000e04 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d106      	bne.n	8000e38 <HAL_RCC_OscConfig+0x2f0>
 8000e2a:	4b81      	ldr	r3, [pc, #516]	; (8001030 <HAL_RCC_OscConfig+0x4e8>)
 8000e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e2e:	4a80      	ldr	r2, [pc, #512]	; (8001030 <HAL_RCC_OscConfig+0x4e8>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6713      	str	r3, [r2, #112]	; 0x70
 8000e36:	e01c      	b.n	8000e72 <HAL_RCC_OscConfig+0x32a>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	2b05      	cmp	r3, #5
 8000e3e:	d10c      	bne.n	8000e5a <HAL_RCC_OscConfig+0x312>
 8000e40:	4b7b      	ldr	r3, [pc, #492]	; (8001030 <HAL_RCC_OscConfig+0x4e8>)
 8000e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e44:	4a7a      	ldr	r2, [pc, #488]	; (8001030 <HAL_RCC_OscConfig+0x4e8>)
 8000e46:	f043 0304 	orr.w	r3, r3, #4
 8000e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8000e4c:	4b78      	ldr	r3, [pc, #480]	; (8001030 <HAL_RCC_OscConfig+0x4e8>)
 8000e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e50:	4a77      	ldr	r2, [pc, #476]	; (8001030 <HAL_RCC_OscConfig+0x4e8>)
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	6713      	str	r3, [r2, #112]	; 0x70
 8000e58:	e00b      	b.n	8000e72 <HAL_RCC_OscConfig+0x32a>
 8000e5a:	4b75      	ldr	r3, [pc, #468]	; (8001030 <HAL_RCC_OscConfig+0x4e8>)
 8000e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e5e:	4a74      	ldr	r2, [pc, #464]	; (8001030 <HAL_RCC_OscConfig+0x4e8>)
 8000e60:	f023 0301 	bic.w	r3, r3, #1
 8000e64:	6713      	str	r3, [r2, #112]	; 0x70
 8000e66:	4b72      	ldr	r3, [pc, #456]	; (8001030 <HAL_RCC_OscConfig+0x4e8>)
 8000e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e6a:	4a71      	ldr	r2, [pc, #452]	; (8001030 <HAL_RCC_OscConfig+0x4e8>)
 8000e6c:	f023 0304 	bic.w	r3, r3, #4
 8000e70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d015      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e7a:	f7ff fb87 	bl	800058c <HAL_GetTick>
 8000e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e80:	e00a      	b.n	8000e98 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e82:	f7ff fb83 	bl	800058c <HAL_GetTick>
 8000e86:	4602      	mov	r2, r0
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d901      	bls.n	8000e98 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000e94:	2303      	movs	r3, #3
 8000e96:	e0c5      	b.n	8001024 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e98:	4b65      	ldr	r3, [pc, #404]	; (8001030 <HAL_RCC_OscConfig+0x4e8>)
 8000e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e9c:	f003 0302 	and.w	r3, r3, #2
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d0ee      	beq.n	8000e82 <HAL_RCC_OscConfig+0x33a>
 8000ea4:	e014      	b.n	8000ed0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ea6:	f7ff fb71 	bl	800058c <HAL_GetTick>
 8000eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eac:	e00a      	b.n	8000ec4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eae:	f7ff fb6d 	bl	800058c <HAL_GetTick>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d901      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e0af      	b.n	8001024 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ec4:	4b5a      	ldr	r3, [pc, #360]	; (8001030 <HAL_RCC_OscConfig+0x4e8>)
 8000ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d1ee      	bne.n	8000eae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000ed0:	7dfb      	ldrb	r3, [r7, #23]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d105      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ed6:	4b56      	ldr	r3, [pc, #344]	; (8001030 <HAL_RCC_OscConfig+0x4e8>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	4a55      	ldr	r2, [pc, #340]	; (8001030 <HAL_RCC_OscConfig+0x4e8>)
 8000edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ee0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f000 809b 	beq.w	8001022 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000eec:	4b50      	ldr	r3, [pc, #320]	; (8001030 <HAL_RCC_OscConfig+0x4e8>)
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	f003 030c 	and.w	r3, r3, #12
 8000ef4:	2b08      	cmp	r3, #8
 8000ef6:	d05c      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d141      	bne.n	8000f84 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f00:	4b4c      	ldr	r3, [pc, #304]	; (8001034 <HAL_RCC_OscConfig+0x4ec>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f06:	f7ff fb41 	bl	800058c <HAL_GetTick>
 8000f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f0c:	e008      	b.n	8000f20 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f0e:	f7ff fb3d 	bl	800058c <HAL_GetTick>
 8000f12:	4602      	mov	r2, r0
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d901      	bls.n	8000f20 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e081      	b.n	8001024 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f20:	4b43      	ldr	r3, [pc, #268]	; (8001030 <HAL_RCC_OscConfig+0x4e8>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1f0      	bne.n	8000f0e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	69da      	ldr	r2, [r3, #28]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a1b      	ldr	r3, [r3, #32]
 8000f34:	431a      	orrs	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3a:	019b      	lsls	r3, r3, #6
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f42:	085b      	lsrs	r3, r3, #1
 8000f44:	3b01      	subs	r3, #1
 8000f46:	041b      	lsls	r3, r3, #16
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4e:	061b      	lsls	r3, r3, #24
 8000f50:	4937      	ldr	r1, [pc, #220]	; (8001030 <HAL_RCC_OscConfig+0x4e8>)
 8000f52:	4313      	orrs	r3, r2
 8000f54:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f56:	4b37      	ldr	r3, [pc, #220]	; (8001034 <HAL_RCC_OscConfig+0x4ec>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f5c:	f7ff fb16 	bl	800058c <HAL_GetTick>
 8000f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f62:	e008      	b.n	8000f76 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f64:	f7ff fb12 	bl	800058c <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d901      	bls.n	8000f76 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000f72:	2303      	movs	r3, #3
 8000f74:	e056      	b.n	8001024 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f76:	4b2e      	ldr	r3, [pc, #184]	; (8001030 <HAL_RCC_OscConfig+0x4e8>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d0f0      	beq.n	8000f64 <HAL_RCC_OscConfig+0x41c>
 8000f82:	e04e      	b.n	8001022 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f84:	4b2b      	ldr	r3, [pc, #172]	; (8001034 <HAL_RCC_OscConfig+0x4ec>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8a:	f7ff faff 	bl	800058c <HAL_GetTick>
 8000f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f90:	e008      	b.n	8000fa4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f92:	f7ff fafb 	bl	800058c <HAL_GetTick>
 8000f96:	4602      	mov	r2, r0
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d901      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	e03f      	b.n	8001024 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fa4:	4b22      	ldr	r3, [pc, #136]	; (8001030 <HAL_RCC_OscConfig+0x4e8>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d1f0      	bne.n	8000f92 <HAL_RCC_OscConfig+0x44a>
 8000fb0:	e037      	b.n	8001022 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d101      	bne.n	8000fbe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e032      	b.n	8001024 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <HAL_RCC_OscConfig+0x4e8>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d028      	beq.n	800101e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d121      	bne.n	800101e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d11a      	bne.n	800101e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000fe8:	68fa      	ldr	r2, [r7, #12]
 8000fea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000fee:	4013      	ands	r3, r2
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000ff4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d111      	bne.n	800101e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001004:	085b      	lsrs	r3, r3, #1
 8001006:	3b01      	subs	r3, #1
 8001008:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800100a:	429a      	cmp	r2, r3
 800100c:	d107      	bne.n	800101e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001018:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800101a:	429a      	cmp	r2, r3
 800101c:	d001      	beq.n	8001022 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e000      	b.n	8001024 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40007000 	.word	0x40007000
 8001030:	40023800 	.word	0x40023800
 8001034:	42470060 	.word	0x42470060

08001038 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d101      	bne.n	800104c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e0cc      	b.n	80011e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800104c:	4b68      	ldr	r3, [pc, #416]	; (80011f0 <HAL_RCC_ClockConfig+0x1b8>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0307 	and.w	r3, r3, #7
 8001054:	683a      	ldr	r2, [r7, #0]
 8001056:	429a      	cmp	r2, r3
 8001058:	d90c      	bls.n	8001074 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800105a:	4b65      	ldr	r3, [pc, #404]	; (80011f0 <HAL_RCC_ClockConfig+0x1b8>)
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	b2d2      	uxtb	r2, r2
 8001060:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001062:	4b63      	ldr	r3, [pc, #396]	; (80011f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	429a      	cmp	r2, r3
 800106e:	d001      	beq.n	8001074 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e0b8      	b.n	80011e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0302 	and.w	r3, r3, #2
 800107c:	2b00      	cmp	r3, #0
 800107e:	d020      	beq.n	80010c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 0304 	and.w	r3, r3, #4
 8001088:	2b00      	cmp	r3, #0
 800108a:	d005      	beq.n	8001098 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800108c:	4b59      	ldr	r3, [pc, #356]	; (80011f4 <HAL_RCC_ClockConfig+0x1bc>)
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	4a58      	ldr	r2, [pc, #352]	; (80011f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001092:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001096:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0308 	and.w	r3, r3, #8
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d005      	beq.n	80010b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010a4:	4b53      	ldr	r3, [pc, #332]	; (80011f4 <HAL_RCC_ClockConfig+0x1bc>)
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	4a52      	ldr	r2, [pc, #328]	; (80011f4 <HAL_RCC_ClockConfig+0x1bc>)
 80010aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010b0:	4b50      	ldr	r3, [pc, #320]	; (80011f4 <HAL_RCC_ClockConfig+0x1bc>)
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	494d      	ldr	r1, [pc, #308]	; (80011f4 <HAL_RCC_ClockConfig+0x1bc>)
 80010be:	4313      	orrs	r3, r2
 80010c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d044      	beq.n	8001158 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d107      	bne.n	80010e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d6:	4b47      	ldr	r3, [pc, #284]	; (80011f4 <HAL_RCC_ClockConfig+0x1bc>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d119      	bne.n	8001116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e07f      	b.n	80011e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d003      	beq.n	80010f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010f2:	2b03      	cmp	r3, #3
 80010f4:	d107      	bne.n	8001106 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010f6:	4b3f      	ldr	r3, [pc, #252]	; (80011f4 <HAL_RCC_ClockConfig+0x1bc>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d109      	bne.n	8001116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e06f      	b.n	80011e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001106:	4b3b      	ldr	r3, [pc, #236]	; (80011f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e067      	b.n	80011e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001116:	4b37      	ldr	r3, [pc, #220]	; (80011f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f023 0203 	bic.w	r2, r3, #3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	4934      	ldr	r1, [pc, #208]	; (80011f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001124:	4313      	orrs	r3, r2
 8001126:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001128:	f7ff fa30 	bl	800058c <HAL_GetTick>
 800112c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800112e:	e00a      	b.n	8001146 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001130:	f7ff fa2c 	bl	800058c <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	f241 3288 	movw	r2, #5000	; 0x1388
 800113e:	4293      	cmp	r3, r2
 8001140:	d901      	bls.n	8001146 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e04f      	b.n	80011e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001146:	4b2b      	ldr	r3, [pc, #172]	; (80011f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f003 020c 	and.w	r2, r3, #12
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	429a      	cmp	r2, r3
 8001156:	d1eb      	bne.n	8001130 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001158:	4b25      	ldr	r3, [pc, #148]	; (80011f0 <HAL_RCC_ClockConfig+0x1b8>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0307 	and.w	r3, r3, #7
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	429a      	cmp	r2, r3
 8001164:	d20c      	bcs.n	8001180 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001166:	4b22      	ldr	r3, [pc, #136]	; (80011f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800116e:	4b20      	ldr	r3, [pc, #128]	; (80011f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	683a      	ldr	r2, [r7, #0]
 8001178:	429a      	cmp	r2, r3
 800117a:	d001      	beq.n	8001180 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e032      	b.n	80011e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	2b00      	cmp	r3, #0
 800118a:	d008      	beq.n	800119e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800118c:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <HAL_RCC_ClockConfig+0x1bc>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	4916      	ldr	r1, [pc, #88]	; (80011f4 <HAL_RCC_ClockConfig+0x1bc>)
 800119a:	4313      	orrs	r3, r2
 800119c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0308 	and.w	r3, r3, #8
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d009      	beq.n	80011be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011aa:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <HAL_RCC_ClockConfig+0x1bc>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	490e      	ldr	r1, [pc, #56]	; (80011f4 <HAL_RCC_ClockConfig+0x1bc>)
 80011ba:	4313      	orrs	r3, r2
 80011bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011be:	f000 f821 	bl	8001204 <HAL_RCC_GetSysClockFreq>
 80011c2:	4602      	mov	r2, r0
 80011c4:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <HAL_RCC_ClockConfig+0x1bc>)
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	091b      	lsrs	r3, r3, #4
 80011ca:	f003 030f 	and.w	r3, r3, #15
 80011ce:	490a      	ldr	r1, [pc, #40]	; (80011f8 <HAL_RCC_ClockConfig+0x1c0>)
 80011d0:	5ccb      	ldrb	r3, [r1, r3]
 80011d2:	fa22 f303 	lsr.w	r3, r2, r3
 80011d6:	4a09      	ldr	r2, [pc, #36]	; (80011fc <HAL_RCC_ClockConfig+0x1c4>)
 80011d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <HAL_RCC_ClockConfig+0x1c8>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f990 	bl	8000504 <HAL_InitTick>

  return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40023c00 	.word	0x40023c00
 80011f4:	40023800 	.word	0x40023800
 80011f8:	08003018 	.word	0x08003018
 80011fc:	20000008 	.word	0x20000008
 8001200:	20000000 	.word	0x20000000

08001204 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001204:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001208:	b084      	sub	sp, #16
 800120a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800120c:	2300      	movs	r3, #0
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	2300      	movs	r3, #0
 8001216:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001218:	2300      	movs	r3, #0
 800121a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800121c:	4b67      	ldr	r3, [pc, #412]	; (80013bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f003 030c 	and.w	r3, r3, #12
 8001224:	2b08      	cmp	r3, #8
 8001226:	d00d      	beq.n	8001244 <HAL_RCC_GetSysClockFreq+0x40>
 8001228:	2b08      	cmp	r3, #8
 800122a:	f200 80bd 	bhi.w	80013a8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800122e:	2b00      	cmp	r3, #0
 8001230:	d002      	beq.n	8001238 <HAL_RCC_GetSysClockFreq+0x34>
 8001232:	2b04      	cmp	r3, #4
 8001234:	d003      	beq.n	800123e <HAL_RCC_GetSysClockFreq+0x3a>
 8001236:	e0b7      	b.n	80013a8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001238:	4b61      	ldr	r3, [pc, #388]	; (80013c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800123a:	60bb      	str	r3, [r7, #8]
       break;
 800123c:	e0b7      	b.n	80013ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800123e:	4b61      	ldr	r3, [pc, #388]	; (80013c4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001240:	60bb      	str	r3, [r7, #8]
      break;
 8001242:	e0b4      	b.n	80013ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001244:	4b5d      	ldr	r3, [pc, #372]	; (80013bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800124c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800124e:	4b5b      	ldr	r3, [pc, #364]	; (80013bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d04d      	beq.n	80012f6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800125a:	4b58      	ldr	r3, [pc, #352]	; (80013bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	099b      	lsrs	r3, r3, #6
 8001260:	461a      	mov	r2, r3
 8001262:	f04f 0300 	mov.w	r3, #0
 8001266:	f240 10ff 	movw	r0, #511	; 0x1ff
 800126a:	f04f 0100 	mov.w	r1, #0
 800126e:	ea02 0800 	and.w	r8, r2, r0
 8001272:	ea03 0901 	and.w	r9, r3, r1
 8001276:	4640      	mov	r0, r8
 8001278:	4649      	mov	r1, r9
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	f04f 0300 	mov.w	r3, #0
 8001282:	014b      	lsls	r3, r1, #5
 8001284:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001288:	0142      	lsls	r2, r0, #5
 800128a:	4610      	mov	r0, r2
 800128c:	4619      	mov	r1, r3
 800128e:	ebb0 0008 	subs.w	r0, r0, r8
 8001292:	eb61 0109 	sbc.w	r1, r1, r9
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	f04f 0300 	mov.w	r3, #0
 800129e:	018b      	lsls	r3, r1, #6
 80012a0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80012a4:	0182      	lsls	r2, r0, #6
 80012a6:	1a12      	subs	r2, r2, r0
 80012a8:	eb63 0301 	sbc.w	r3, r3, r1
 80012ac:	f04f 0000 	mov.w	r0, #0
 80012b0:	f04f 0100 	mov.w	r1, #0
 80012b4:	00d9      	lsls	r1, r3, #3
 80012b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80012ba:	00d0      	lsls	r0, r2, #3
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	eb12 0208 	adds.w	r2, r2, r8
 80012c4:	eb43 0309 	adc.w	r3, r3, r9
 80012c8:	f04f 0000 	mov.w	r0, #0
 80012cc:	f04f 0100 	mov.w	r1, #0
 80012d0:	0259      	lsls	r1, r3, #9
 80012d2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80012d6:	0250      	lsls	r0, r2, #9
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4610      	mov	r0, r2
 80012de:	4619      	mov	r1, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	461a      	mov	r2, r3
 80012e4:	f04f 0300 	mov.w	r3, #0
 80012e8:	f7fe ff6e 	bl	80001c8 <__aeabi_uldivmod>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4613      	mov	r3, r2
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	e04a      	b.n	800138c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012f6:	4b31      	ldr	r3, [pc, #196]	; (80013bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	099b      	lsrs	r3, r3, #6
 80012fc:	461a      	mov	r2, r3
 80012fe:	f04f 0300 	mov.w	r3, #0
 8001302:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001306:	f04f 0100 	mov.w	r1, #0
 800130a:	ea02 0400 	and.w	r4, r2, r0
 800130e:	ea03 0501 	and.w	r5, r3, r1
 8001312:	4620      	mov	r0, r4
 8001314:	4629      	mov	r1, r5
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	014b      	lsls	r3, r1, #5
 8001320:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001324:	0142      	lsls	r2, r0, #5
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	1b00      	subs	r0, r0, r4
 800132c:	eb61 0105 	sbc.w	r1, r1, r5
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	f04f 0300 	mov.w	r3, #0
 8001338:	018b      	lsls	r3, r1, #6
 800133a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800133e:	0182      	lsls	r2, r0, #6
 8001340:	1a12      	subs	r2, r2, r0
 8001342:	eb63 0301 	sbc.w	r3, r3, r1
 8001346:	f04f 0000 	mov.w	r0, #0
 800134a:	f04f 0100 	mov.w	r1, #0
 800134e:	00d9      	lsls	r1, r3, #3
 8001350:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001354:	00d0      	lsls	r0, r2, #3
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	1912      	adds	r2, r2, r4
 800135c:	eb45 0303 	adc.w	r3, r5, r3
 8001360:	f04f 0000 	mov.w	r0, #0
 8001364:	f04f 0100 	mov.w	r1, #0
 8001368:	0299      	lsls	r1, r3, #10
 800136a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800136e:	0290      	lsls	r0, r2, #10
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4610      	mov	r0, r2
 8001376:	4619      	mov	r1, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	461a      	mov	r2, r3
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	f7fe ff22 	bl	80001c8 <__aeabi_uldivmod>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4613      	mov	r3, r2
 800138a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	0c1b      	lsrs	r3, r3, #16
 8001392:	f003 0303 	and.w	r3, r3, #3
 8001396:	3301      	adds	r3, #1
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a4:	60bb      	str	r3, [r7, #8]
      break;
 80013a6:	e002      	b.n	80013ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80013aa:	60bb      	str	r3, [r7, #8]
      break;
 80013ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013ae:	68bb      	ldr	r3, [r7, #8]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013ba:	bf00      	nop
 80013bc:	40023800 	.word	0x40023800
 80013c0:	00f42400 	.word	0x00f42400
 80013c4:	007a1200 	.word	0x007a1200

080013c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e041      	b.n	800145e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d106      	bne.n	80013f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f001 fc4c 	bl	8002c8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2202      	movs	r2, #2
 80013f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3304      	adds	r3, #4
 8001404:	4619      	mov	r1, r3
 8001406:	4610      	mov	r0, r2
 8001408:	f000 fc12 	bl	8001c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2201      	movs	r2, #1
 8001420:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2201      	movs	r2, #1
 8001440:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2201      	movs	r2, #1
 8001450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d101      	bne.n	8001478 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e041      	b.n	80014fc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b00      	cmp	r3, #0
 8001482:	d106      	bne.n	8001492 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f000 f839 	bl	8001504 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2202      	movs	r2, #2
 8001496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3304      	adds	r3, #4
 80014a2:	4619      	mov	r1, r3
 80014a4:	4610      	mov	r0, r2
 80014a6:	f000 fbc3 	bl	8001c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2201      	movs	r2, #1
 80014ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2201      	movs	r2, #1
 80014b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2201      	movs	r2, #1
 80014be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2201      	movs	r2, #1
 80014c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2201      	movs	r2, #1
 80014ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2201      	movs	r2, #1
 80014d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2201      	movs	r2, #1
 80014de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2201      	movs	r2, #1
 80014e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2201      	movs	r2, #1
 80014ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2201      	movs	r2, #1
 80014f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d109      	bne.n	800153c <HAL_TIM_PWM_Start+0x24>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b01      	cmp	r3, #1
 8001532:	bf14      	ite	ne
 8001534:	2301      	movne	r3, #1
 8001536:	2300      	moveq	r3, #0
 8001538:	b2db      	uxtb	r3, r3
 800153a:	e022      	b.n	8001582 <HAL_TIM_PWM_Start+0x6a>
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	2b04      	cmp	r3, #4
 8001540:	d109      	bne.n	8001556 <HAL_TIM_PWM_Start+0x3e>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b01      	cmp	r3, #1
 800154c:	bf14      	ite	ne
 800154e:	2301      	movne	r3, #1
 8001550:	2300      	moveq	r3, #0
 8001552:	b2db      	uxtb	r3, r3
 8001554:	e015      	b.n	8001582 <HAL_TIM_PWM_Start+0x6a>
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	2b08      	cmp	r3, #8
 800155a:	d109      	bne.n	8001570 <HAL_TIM_PWM_Start+0x58>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b01      	cmp	r3, #1
 8001566:	bf14      	ite	ne
 8001568:	2301      	movne	r3, #1
 800156a:	2300      	moveq	r3, #0
 800156c:	b2db      	uxtb	r3, r3
 800156e:	e008      	b.n	8001582 <HAL_TIM_PWM_Start+0x6a>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b01      	cmp	r3, #1
 800157a:	bf14      	ite	ne
 800157c:	2301      	movne	r3, #1
 800157e:	2300      	moveq	r3, #0
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e07c      	b.n	8001684 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d104      	bne.n	800159a <HAL_TIM_PWM_Start+0x82>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2202      	movs	r2, #2
 8001594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001598:	e013      	b.n	80015c2 <HAL_TIM_PWM_Start+0xaa>
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	2b04      	cmp	r3, #4
 800159e:	d104      	bne.n	80015aa <HAL_TIM_PWM_Start+0x92>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2202      	movs	r2, #2
 80015a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80015a8:	e00b      	b.n	80015c2 <HAL_TIM_PWM_Start+0xaa>
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	2b08      	cmp	r3, #8
 80015ae:	d104      	bne.n	80015ba <HAL_TIM_PWM_Start+0xa2>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2202      	movs	r2, #2
 80015b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80015b8:	e003      	b.n	80015c2 <HAL_TIM_PWM_Start+0xaa>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2202      	movs	r2, #2
 80015be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2201      	movs	r2, #1
 80015c8:	6839      	ldr	r1, [r7, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 fe1a 	bl	8002204 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a2d      	ldr	r2, [pc, #180]	; (800168c <HAL_TIM_PWM_Start+0x174>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d004      	beq.n	80015e4 <HAL_TIM_PWM_Start+0xcc>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a2c      	ldr	r2, [pc, #176]	; (8001690 <HAL_TIM_PWM_Start+0x178>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d101      	bne.n	80015e8 <HAL_TIM_PWM_Start+0xd0>
 80015e4:	2301      	movs	r3, #1
 80015e6:	e000      	b.n	80015ea <HAL_TIM_PWM_Start+0xd2>
 80015e8:	2300      	movs	r3, #0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d007      	beq.n	80015fe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a22      	ldr	r2, [pc, #136]	; (800168c <HAL_TIM_PWM_Start+0x174>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d022      	beq.n	800164e <HAL_TIM_PWM_Start+0x136>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001610:	d01d      	beq.n	800164e <HAL_TIM_PWM_Start+0x136>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a1f      	ldr	r2, [pc, #124]	; (8001694 <HAL_TIM_PWM_Start+0x17c>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d018      	beq.n	800164e <HAL_TIM_PWM_Start+0x136>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a1d      	ldr	r2, [pc, #116]	; (8001698 <HAL_TIM_PWM_Start+0x180>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d013      	beq.n	800164e <HAL_TIM_PWM_Start+0x136>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a1c      	ldr	r2, [pc, #112]	; (800169c <HAL_TIM_PWM_Start+0x184>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d00e      	beq.n	800164e <HAL_TIM_PWM_Start+0x136>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a16      	ldr	r2, [pc, #88]	; (8001690 <HAL_TIM_PWM_Start+0x178>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d009      	beq.n	800164e <HAL_TIM_PWM_Start+0x136>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a18      	ldr	r2, [pc, #96]	; (80016a0 <HAL_TIM_PWM_Start+0x188>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d004      	beq.n	800164e <HAL_TIM_PWM_Start+0x136>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a16      	ldr	r2, [pc, #88]	; (80016a4 <HAL_TIM_PWM_Start+0x18c>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d111      	bne.n	8001672 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f003 0307 	and.w	r3, r3, #7
 8001658:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2b06      	cmp	r3, #6
 800165e:	d010      	beq.n	8001682 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f042 0201 	orr.w	r2, r2, #1
 800166e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001670:	e007      	b.n	8001682 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f042 0201 	orr.w	r2, r2, #1
 8001680:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40010000 	.word	0x40010000
 8001690:	40010400 	.word	0x40010400
 8001694:	40000400 	.word	0x40000400
 8001698:	40000800 	.word	0x40000800
 800169c:	40000c00 	.word	0x40000c00
 80016a0:	40014000 	.word	0x40014000
 80016a4:	40001800 	.word	0x40001800

080016a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d122      	bne.n	8001704 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d11b      	bne.n	8001704 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f06f 0202 	mvn.w	r2, #2
 80016d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2201      	movs	r2, #1
 80016da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	f003 0303 	and.w	r3, r3, #3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 fa81 	bl	8001bf2 <HAL_TIM_IC_CaptureCallback>
 80016f0:	e005      	b.n	80016fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 fa73 	bl	8001bde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 fa84 	bl	8001c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	f003 0304 	and.w	r3, r3, #4
 800170e:	2b04      	cmp	r3, #4
 8001710:	d122      	bne.n	8001758 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b04      	cmp	r3, #4
 800171e:	d11b      	bne.n	8001758 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f06f 0204 	mvn.w	r2, #4
 8001728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2202      	movs	r2, #2
 800172e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 fa57 	bl	8001bf2 <HAL_TIM_IC_CaptureCallback>
 8001744:	e005      	b.n	8001752 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 fa49 	bl	8001bde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 fa5a 	bl	8001c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	2b08      	cmp	r3, #8
 8001764:	d122      	bne.n	80017ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	f003 0308 	and.w	r3, r3, #8
 8001770:	2b08      	cmp	r3, #8
 8001772:	d11b      	bne.n	80017ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f06f 0208 	mvn.w	r2, #8
 800177c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2204      	movs	r2, #4
 8001782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	f003 0303 	and.w	r3, r3, #3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 fa2d 	bl	8001bf2 <HAL_TIM_IC_CaptureCallback>
 8001798:	e005      	b.n	80017a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 fa1f 	bl	8001bde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f000 fa30 	bl	8001c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	f003 0310 	and.w	r3, r3, #16
 80017b6:	2b10      	cmp	r3, #16
 80017b8:	d122      	bne.n	8001800 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	f003 0310 	and.w	r3, r3, #16
 80017c4:	2b10      	cmp	r3, #16
 80017c6:	d11b      	bne.n	8001800 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f06f 0210 	mvn.w	r2, #16
 80017d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2208      	movs	r2, #8
 80017d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d003      	beq.n	80017ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 fa03 	bl	8001bf2 <HAL_TIM_IC_CaptureCallback>
 80017ec:	e005      	b.n	80017fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f000 f9f5 	bl	8001bde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 fa06 	bl	8001c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b01      	cmp	r3, #1
 800180c:	d10e      	bne.n	800182c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	2b01      	cmp	r3, #1
 800181a:	d107      	bne.n	800182c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f06f 0201 	mvn.w	r2, #1
 8001824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 f9cf 	bl	8001bca <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001836:	2b80      	cmp	r3, #128	; 0x80
 8001838:	d10e      	bne.n	8001858 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001844:	2b80      	cmp	r3, #128	; 0x80
 8001846:	d107      	bne.n	8001858 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 fdd4 	bl	8002400 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001862:	2b40      	cmp	r3, #64	; 0x40
 8001864:	d10e      	bne.n	8001884 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001870:	2b40      	cmp	r3, #64	; 0x40
 8001872:	d107      	bne.n	8001884 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800187c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 f9cb 	bl	8001c1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	f003 0320 	and.w	r3, r3, #32
 800188e:	2b20      	cmp	r3, #32
 8001890:	d10e      	bne.n	80018b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	f003 0320 	and.w	r3, r3, #32
 800189c:	2b20      	cmp	r3, #32
 800189e:	d107      	bne.n	80018b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f06f 0220 	mvn.w	r2, #32
 80018a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 fd9e 	bl	80023ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d101      	bne.n	80018d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80018d2:	2302      	movs	r3, #2
 80018d4:	e0ae      	b.n	8001a34 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2201      	movs	r2, #1
 80018da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b0c      	cmp	r3, #12
 80018e2:	f200 809f 	bhi.w	8001a24 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80018e6:	a201      	add	r2, pc, #4	; (adr r2, 80018ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80018e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ec:	08001921 	.word	0x08001921
 80018f0:	08001a25 	.word	0x08001a25
 80018f4:	08001a25 	.word	0x08001a25
 80018f8:	08001a25 	.word	0x08001a25
 80018fc:	08001961 	.word	0x08001961
 8001900:	08001a25 	.word	0x08001a25
 8001904:	08001a25 	.word	0x08001a25
 8001908:	08001a25 	.word	0x08001a25
 800190c:	080019a3 	.word	0x080019a3
 8001910:	08001a25 	.word	0x08001a25
 8001914:	08001a25 	.word	0x08001a25
 8001918:	08001a25 	.word	0x08001a25
 800191c:	080019e3 	.word	0x080019e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	4618      	mov	r0, r3
 8001928:	f000 fa22 	bl	8001d70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	699a      	ldr	r2, [r3, #24]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f042 0208 	orr.w	r2, r2, #8
 800193a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	699a      	ldr	r2, [r3, #24]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 0204 	bic.w	r2, r2, #4
 800194a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6999      	ldr	r1, [r3, #24]
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	691a      	ldr	r2, [r3, #16]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	619a      	str	r2, [r3, #24]
      break;
 800195e:	e064      	b.n	8001a2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	68b9      	ldr	r1, [r7, #8]
 8001966:	4618      	mov	r0, r3
 8001968:	f000 fa72 	bl	8001e50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	699a      	ldr	r2, [r3, #24]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800197a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	699a      	ldr	r2, [r3, #24]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800198a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6999      	ldr	r1, [r3, #24]
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	021a      	lsls	r2, r3, #8
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	619a      	str	r2, [r3, #24]
      break;
 80019a0:	e043      	b.n	8001a2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	68b9      	ldr	r1, [r7, #8]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f000 fac7 	bl	8001f3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	69da      	ldr	r2, [r3, #28]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f042 0208 	orr.w	r2, r2, #8
 80019bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	69da      	ldr	r2, [r3, #28]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 0204 	bic.w	r2, r2, #4
 80019cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	69d9      	ldr	r1, [r3, #28]
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	691a      	ldr	r2, [r3, #16]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	61da      	str	r2, [r3, #28]
      break;
 80019e0:	e023      	b.n	8001a2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	68b9      	ldr	r1, [r7, #8]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 fb1b 	bl	8002024 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	69da      	ldr	r2, [r3, #28]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	69da      	ldr	r2, [r3, #28]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	69d9      	ldr	r1, [r3, #28]
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	021a      	lsls	r2, r3, #8
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	61da      	str	r2, [r3, #28]
      break;
 8001a22:	e002      	b.n	8001a2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	75fb      	strb	r3, [r7, #23]
      break;
 8001a28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a46:	2300      	movs	r3, #0
 8001a48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d101      	bne.n	8001a58 <HAL_TIM_ConfigClockSource+0x1c>
 8001a54:	2302      	movs	r3, #2
 8001a56:	e0b4      	b.n	8001bc2 <HAL_TIM_ConfigClockSource+0x186>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2202      	movs	r2, #2
 8001a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001a76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68ba      	ldr	r2, [r7, #8]
 8001a86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a90:	d03e      	beq.n	8001b10 <HAL_TIM_ConfigClockSource+0xd4>
 8001a92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a96:	f200 8087 	bhi.w	8001ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8001a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a9e:	f000 8086 	beq.w	8001bae <HAL_TIM_ConfigClockSource+0x172>
 8001aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aa6:	d87f      	bhi.n	8001ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8001aa8:	2b70      	cmp	r3, #112	; 0x70
 8001aaa:	d01a      	beq.n	8001ae2 <HAL_TIM_ConfigClockSource+0xa6>
 8001aac:	2b70      	cmp	r3, #112	; 0x70
 8001aae:	d87b      	bhi.n	8001ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8001ab0:	2b60      	cmp	r3, #96	; 0x60
 8001ab2:	d050      	beq.n	8001b56 <HAL_TIM_ConfigClockSource+0x11a>
 8001ab4:	2b60      	cmp	r3, #96	; 0x60
 8001ab6:	d877      	bhi.n	8001ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8001ab8:	2b50      	cmp	r3, #80	; 0x50
 8001aba:	d03c      	beq.n	8001b36 <HAL_TIM_ConfigClockSource+0xfa>
 8001abc:	2b50      	cmp	r3, #80	; 0x50
 8001abe:	d873      	bhi.n	8001ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8001ac0:	2b40      	cmp	r3, #64	; 0x40
 8001ac2:	d058      	beq.n	8001b76 <HAL_TIM_ConfigClockSource+0x13a>
 8001ac4:	2b40      	cmp	r3, #64	; 0x40
 8001ac6:	d86f      	bhi.n	8001ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8001ac8:	2b30      	cmp	r3, #48	; 0x30
 8001aca:	d064      	beq.n	8001b96 <HAL_TIM_ConfigClockSource+0x15a>
 8001acc:	2b30      	cmp	r3, #48	; 0x30
 8001ace:	d86b      	bhi.n	8001ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8001ad0:	2b20      	cmp	r3, #32
 8001ad2:	d060      	beq.n	8001b96 <HAL_TIM_ConfigClockSource+0x15a>
 8001ad4:	2b20      	cmp	r3, #32
 8001ad6:	d867      	bhi.n	8001ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d05c      	beq.n	8001b96 <HAL_TIM_ConfigClockSource+0x15a>
 8001adc:	2b10      	cmp	r3, #16
 8001ade:	d05a      	beq.n	8001b96 <HAL_TIM_ConfigClockSource+0x15a>
 8001ae0:	e062      	b.n	8001ba8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6818      	ldr	r0, [r3, #0]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	6899      	ldr	r1, [r3, #8]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	f000 fb67 	bl	80021c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001b04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	609a      	str	r2, [r3, #8]
      break;
 8001b0e:	e04f      	b.n	8001bb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	6899      	ldr	r1, [r3, #8]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	f000 fb50 	bl	80021c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b32:	609a      	str	r2, [r3, #8]
      break;
 8001b34:	e03c      	b.n	8001bb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6818      	ldr	r0, [r3, #0]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	6859      	ldr	r1, [r3, #4]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	461a      	mov	r2, r3
 8001b44:	f000 fac4 	bl	80020d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2150      	movs	r1, #80	; 0x50
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 fb1d 	bl	800218e <TIM_ITRx_SetConfig>
      break;
 8001b54:	e02c      	b.n	8001bb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6818      	ldr	r0, [r3, #0]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	6859      	ldr	r1, [r3, #4]
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	461a      	mov	r2, r3
 8001b64:	f000 fae3 	bl	800212e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2160      	movs	r1, #96	; 0x60
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f000 fb0d 	bl	800218e <TIM_ITRx_SetConfig>
      break;
 8001b74:	e01c      	b.n	8001bb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6818      	ldr	r0, [r3, #0]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	6859      	ldr	r1, [r3, #4]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	461a      	mov	r2, r3
 8001b84:	f000 faa4 	bl	80020d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2140      	movs	r1, #64	; 0x40
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f000 fafd 	bl	800218e <TIM_ITRx_SetConfig>
      break;
 8001b94:	e00c      	b.n	8001bb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4610      	mov	r0, r2
 8001ba2:	f000 faf4 	bl	800218e <TIM_ITRx_SetConfig>
      break;
 8001ba6:	e003      	b.n	8001bb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	73fb      	strb	r3, [r7, #15]
      break;
 8001bac:	e000      	b.n	8001bb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001bae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a40      	ldr	r2, [pc, #256]	; (8001d44 <TIM_Base_SetConfig+0x114>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d013      	beq.n	8001c70 <TIM_Base_SetConfig+0x40>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c4e:	d00f      	beq.n	8001c70 <TIM_Base_SetConfig+0x40>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a3d      	ldr	r2, [pc, #244]	; (8001d48 <TIM_Base_SetConfig+0x118>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d00b      	beq.n	8001c70 <TIM_Base_SetConfig+0x40>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a3c      	ldr	r2, [pc, #240]	; (8001d4c <TIM_Base_SetConfig+0x11c>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d007      	beq.n	8001c70 <TIM_Base_SetConfig+0x40>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a3b      	ldr	r2, [pc, #236]	; (8001d50 <TIM_Base_SetConfig+0x120>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d003      	beq.n	8001c70 <TIM_Base_SetConfig+0x40>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a3a      	ldr	r2, [pc, #232]	; (8001d54 <TIM_Base_SetConfig+0x124>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d108      	bne.n	8001c82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a2f      	ldr	r2, [pc, #188]	; (8001d44 <TIM_Base_SetConfig+0x114>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d02b      	beq.n	8001ce2 <TIM_Base_SetConfig+0xb2>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c90:	d027      	beq.n	8001ce2 <TIM_Base_SetConfig+0xb2>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a2c      	ldr	r2, [pc, #176]	; (8001d48 <TIM_Base_SetConfig+0x118>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d023      	beq.n	8001ce2 <TIM_Base_SetConfig+0xb2>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a2b      	ldr	r2, [pc, #172]	; (8001d4c <TIM_Base_SetConfig+0x11c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d01f      	beq.n	8001ce2 <TIM_Base_SetConfig+0xb2>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a2a      	ldr	r2, [pc, #168]	; (8001d50 <TIM_Base_SetConfig+0x120>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d01b      	beq.n	8001ce2 <TIM_Base_SetConfig+0xb2>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a29      	ldr	r2, [pc, #164]	; (8001d54 <TIM_Base_SetConfig+0x124>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d017      	beq.n	8001ce2 <TIM_Base_SetConfig+0xb2>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a28      	ldr	r2, [pc, #160]	; (8001d58 <TIM_Base_SetConfig+0x128>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d013      	beq.n	8001ce2 <TIM_Base_SetConfig+0xb2>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a27      	ldr	r2, [pc, #156]	; (8001d5c <TIM_Base_SetConfig+0x12c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d00f      	beq.n	8001ce2 <TIM_Base_SetConfig+0xb2>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a26      	ldr	r2, [pc, #152]	; (8001d60 <TIM_Base_SetConfig+0x130>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d00b      	beq.n	8001ce2 <TIM_Base_SetConfig+0xb2>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a25      	ldr	r2, [pc, #148]	; (8001d64 <TIM_Base_SetConfig+0x134>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d007      	beq.n	8001ce2 <TIM_Base_SetConfig+0xb2>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a24      	ldr	r2, [pc, #144]	; (8001d68 <TIM_Base_SetConfig+0x138>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d003      	beq.n	8001ce2 <TIM_Base_SetConfig+0xb2>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a23      	ldr	r2, [pc, #140]	; (8001d6c <TIM_Base_SetConfig+0x13c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d108      	bne.n	8001cf4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ce8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a0a      	ldr	r2, [pc, #40]	; (8001d44 <TIM_Base_SetConfig+0x114>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d003      	beq.n	8001d28 <TIM_Base_SetConfig+0xf8>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a0c      	ldr	r2, [pc, #48]	; (8001d54 <TIM_Base_SetConfig+0x124>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d103      	bne.n	8001d30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	691a      	ldr	r2, [r3, #16]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	615a      	str	r2, [r3, #20]
}
 8001d36:	bf00      	nop
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40010000 	.word	0x40010000
 8001d48:	40000400 	.word	0x40000400
 8001d4c:	40000800 	.word	0x40000800
 8001d50:	40000c00 	.word	0x40000c00
 8001d54:	40010400 	.word	0x40010400
 8001d58:	40014000 	.word	0x40014000
 8001d5c:	40014400 	.word	0x40014400
 8001d60:	40014800 	.word	0x40014800
 8001d64:	40001800 	.word	0x40001800
 8001d68:	40001c00 	.word	0x40001c00
 8001d6c:	40002000 	.word	0x40002000

08001d70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b087      	sub	sp, #28
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	f023 0201 	bic.w	r2, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f023 0303 	bic.w	r3, r3, #3
 8001da6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f023 0302 	bic.w	r3, r3, #2
 8001db8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a20      	ldr	r2, [pc, #128]	; (8001e48 <TIM_OC1_SetConfig+0xd8>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d003      	beq.n	8001dd4 <TIM_OC1_SetConfig+0x64>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a1f      	ldr	r2, [pc, #124]	; (8001e4c <TIM_OC1_SetConfig+0xdc>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d10c      	bne.n	8001dee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	f023 0308 	bic.w	r3, r3, #8
 8001dda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	f023 0304 	bic.w	r3, r3, #4
 8001dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a15      	ldr	r2, [pc, #84]	; (8001e48 <TIM_OC1_SetConfig+0xd8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d003      	beq.n	8001dfe <TIM_OC1_SetConfig+0x8e>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a14      	ldr	r2, [pc, #80]	; (8001e4c <TIM_OC1_SetConfig+0xdc>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d111      	bne.n	8001e22 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	621a      	str	r2, [r3, #32]
}
 8001e3c:	bf00      	nop
 8001e3e:	371c      	adds	r7, #28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	40010000 	.word	0x40010000
 8001e4c:	40010400 	.word	0x40010400

08001e50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b087      	sub	sp, #28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	f023 0210 	bic.w	r2, r3, #16
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	021b      	lsls	r3, r3, #8
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	f023 0320 	bic.w	r3, r3, #32
 8001e9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	011b      	lsls	r3, r3, #4
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a22      	ldr	r2, [pc, #136]	; (8001f34 <TIM_OC2_SetConfig+0xe4>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d003      	beq.n	8001eb8 <TIM_OC2_SetConfig+0x68>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a21      	ldr	r2, [pc, #132]	; (8001f38 <TIM_OC2_SetConfig+0xe8>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d10d      	bne.n	8001ed4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ebe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	011b      	lsls	r3, r3, #4
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ed2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a17      	ldr	r2, [pc, #92]	; (8001f34 <TIM_OC2_SetConfig+0xe4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d003      	beq.n	8001ee4 <TIM_OC2_SetConfig+0x94>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a16      	ldr	r2, [pc, #88]	; (8001f38 <TIM_OC2_SetConfig+0xe8>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d113      	bne.n	8001f0c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001eea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	621a      	str	r2, [r3, #32]
}
 8001f26:	bf00      	nop
 8001f28:	371c      	adds	r7, #28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	40010000 	.word	0x40010000
 8001f38:	40010400 	.word	0x40010400

08001f3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b087      	sub	sp, #28
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f023 0303 	bic.w	r3, r3, #3
 8001f72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	021b      	lsls	r3, r3, #8
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a21      	ldr	r2, [pc, #132]	; (800201c <TIM_OC3_SetConfig+0xe0>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d003      	beq.n	8001fa2 <TIM_OC3_SetConfig+0x66>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a20      	ldr	r2, [pc, #128]	; (8002020 <TIM_OC3_SetConfig+0xe4>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d10d      	bne.n	8001fbe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001fa8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	021b      	lsls	r3, r3, #8
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001fbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a16      	ldr	r2, [pc, #88]	; (800201c <TIM_OC3_SetConfig+0xe0>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d003      	beq.n	8001fce <TIM_OC3_SetConfig+0x92>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a15      	ldr	r2, [pc, #84]	; (8002020 <TIM_OC3_SetConfig+0xe4>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d113      	bne.n	8001ff6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001fd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	011b      	lsls	r3, r3, #4
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	011b      	lsls	r3, r3, #4
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	621a      	str	r2, [r3, #32]
}
 8002010:	bf00      	nop
 8002012:	371c      	adds	r7, #28
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	40010000 	.word	0x40010000
 8002020:	40010400 	.word	0x40010400

08002024 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002024:	b480      	push	{r7}
 8002026:	b087      	sub	sp, #28
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800205a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	021b      	lsls	r3, r3, #8
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4313      	orrs	r3, r2
 8002066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800206e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	031b      	lsls	r3, r3, #12
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	4313      	orrs	r3, r2
 800207a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a12      	ldr	r2, [pc, #72]	; (80020c8 <TIM_OC4_SetConfig+0xa4>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d003      	beq.n	800208c <TIM_OC4_SetConfig+0x68>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a11      	ldr	r2, [pc, #68]	; (80020cc <TIM_OC4_SetConfig+0xa8>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d109      	bne.n	80020a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002092:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	019b      	lsls	r3, r3, #6
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	4313      	orrs	r3, r2
 800209e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	621a      	str	r2, [r3, #32]
}
 80020ba:	bf00      	nop
 80020bc:	371c      	adds	r7, #28
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40010000 	.word	0x40010000
 80020cc:	40010400 	.word	0x40010400

080020d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b087      	sub	sp, #28
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	f023 0201 	bic.w	r2, r3, #1
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	011b      	lsls	r3, r3, #4
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4313      	orrs	r3, r2
 8002104:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f023 030a 	bic.w	r3, r3, #10
 800210c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	4313      	orrs	r3, r2
 8002114:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	621a      	str	r2, [r3, #32]
}
 8002122:	bf00      	nop
 8002124:	371c      	adds	r7, #28
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800212e:	b480      	push	{r7}
 8002130:	b087      	sub	sp, #28
 8002132:	af00      	add	r7, sp, #0
 8002134:	60f8      	str	r0, [r7, #12]
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	f023 0210 	bic.w	r2, r3, #16
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002158:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	031b      	lsls	r3, r3, #12
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	4313      	orrs	r3, r2
 8002162:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800216a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	011b      	lsls	r3, r3, #4
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	4313      	orrs	r3, r2
 8002174:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	621a      	str	r2, [r3, #32]
}
 8002182:	bf00      	nop
 8002184:	371c      	adds	r7, #28
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800218e:	b480      	push	{r7}
 8002190:	b085      	sub	sp, #20
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	f043 0307 	orr.w	r3, r3, #7
 80021b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	609a      	str	r2, [r3, #8]
}
 80021b8:	bf00      	nop
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b087      	sub	sp, #28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
 80021d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	021a      	lsls	r2, r3, #8
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	431a      	orrs	r2, r3
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	609a      	str	r2, [r3, #8]
}
 80021f8:	bf00      	nop
 80021fa:	371c      	adds	r7, #28
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002204:	b480      	push	{r7}
 8002206:	b087      	sub	sp, #28
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f003 031f 	and.w	r3, r3, #31
 8002216:	2201      	movs	r2, #1
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6a1a      	ldr	r2, [r3, #32]
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	43db      	mvns	r3, r3
 8002226:	401a      	ands	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6a1a      	ldr	r2, [r3, #32]
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f003 031f 	and.w	r3, r3, #31
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	fa01 f303 	lsl.w	r3, r1, r3
 800223c:	431a      	orrs	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	621a      	str	r2, [r3, #32]
}
 8002242:	bf00      	nop
 8002244:	371c      	adds	r7, #28
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002264:	2302      	movs	r3, #2
 8002266:	e05a      	b.n	800231e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2202      	movs	r2, #2
 8002274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800228e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	4313      	orrs	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a21      	ldr	r2, [pc, #132]	; (800232c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d022      	beq.n	80022f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b4:	d01d      	beq.n	80022f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a1d      	ldr	r2, [pc, #116]	; (8002330 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d018      	beq.n	80022f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a1b      	ldr	r2, [pc, #108]	; (8002334 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d013      	beq.n	80022f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a1a      	ldr	r2, [pc, #104]	; (8002338 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d00e      	beq.n	80022f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a18      	ldr	r2, [pc, #96]	; (800233c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d009      	beq.n	80022f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a17      	ldr	r2, [pc, #92]	; (8002340 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d004      	beq.n	80022f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a15      	ldr	r2, [pc, #84]	; (8002344 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d10c      	bne.n	800230c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	4313      	orrs	r3, r2
 8002302:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68ba      	ldr	r2, [r7, #8]
 800230a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40010000 	.word	0x40010000
 8002330:	40000400 	.word	0x40000400
 8002334:	40000800 	.word	0x40000800
 8002338:	40000c00 	.word	0x40000c00
 800233c:	40010400 	.word	0x40010400
 8002340:	40014000 	.word	0x40014000
 8002344:	40001800 	.word	0x40001800

08002348 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800235c:	2b01      	cmp	r3, #1
 800235e:	d101      	bne.n	8002364 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002360:	2302      	movs	r3, #2
 8002362:	e03d      	b.n	80023e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	4313      	orrs	r3, r2
 8002378:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	4313      	orrs	r3, r2
 8002386:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	4313      	orrs	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	4313      	orrs	r3, r2
 80023be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <maju>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void maju(){
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0

		FrontRight = 1480; //
 8002418:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <maju+0x40>)
 800241a:	f44f 62b9 	mov.w	r2, #1480	; 0x5c8
 800241e:	639a      	str	r2, [r3, #56]	; 0x38
		FrontLeft = 1480;
 8002420:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <maju+0x40>)
 8002422:	f44f 62b9 	mov.w	r2, #1480	; 0x5c8
 8002426:	63da      	str	r2, [r3, #60]	; 0x3c
		BackRight = 2000;
 8002428:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <maju+0x44>)
 800242a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800242e:	635a      	str	r2, [r3, #52]	; 0x34
		BackLeft = 2000;
 8002430:	4b09      	ldr	r3, [pc, #36]	; (8002458 <maju+0x44>)
 8002432:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002436:	639a      	str	r2, [r3, #56]	; 0x38
		CenterRight = 1470;
 8002438:	4b08      	ldr	r3, [pc, #32]	; (800245c <maju+0x48>)
 800243a:	f240 52be 	movw	r2, #1470	; 0x5be
 800243e:	635a      	str	r2, [r3, #52]	; 0x34
		CenterLeft = 1480;
 8002440:	4b04      	ldr	r3, [pc, #16]	; (8002454 <maju+0x40>)
 8002442:	f44f 62b9 	mov.w	r2, #1480	; 0x5c8
 8002446:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40010400 	.word	0x40010400
 8002458:	40014000 	.word	0x40014000
 800245c:	40014400 	.word	0x40014400

08002460 <mundur>:
void mundur(){
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0

		FrontRight = 1355;
 8002464:	4b0e      	ldr	r3, [pc, #56]	; (80024a0 <mundur+0x40>)
 8002466:	f240 524b 	movw	r2, #1355	; 0x54b
 800246a:	639a      	str	r2, [r3, #56]	; 0x38
		FrontLeft = 1355;
 800246c:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <mundur+0x40>)
 800246e:	f240 524b 	movw	r2, #1355	; 0x54b
 8002472:	63da      	str	r2, [r3, #60]	; 0x3c
		BackRight = 1345;
 8002474:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <mundur+0x44>)
 8002476:	f240 5241 	movw	r2, #1345	; 0x541
 800247a:	635a      	str	r2, [r3, #52]	; 0x34
		BackLeft = 1355;
 800247c:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <mundur+0x44>)
 800247e:	f240 524b 	movw	r2, #1355	; 0x54b
 8002482:	639a      	str	r2, [r3, #56]	; 0x38
		CenterRight = 1470;
 8002484:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <mundur+0x48>)
 8002486:	f240 52be 	movw	r2, #1470	; 0x5be
 800248a:	635a      	str	r2, [r3, #52]	; 0x34
		CenterLeft = 1480;
 800248c:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <mundur+0x40>)
 800248e:	f44f 62b9 	mov.w	r2, #1480	; 0x5c8
 8002492:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40010400 	.word	0x40010400
 80024a4:	40014000 	.word	0x40014000
 80024a8:	40014400 	.word	0x40014400

080024ac <atas>:
void atas(){
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
		FrontRight = 1480;
 80024b0:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <atas+0x40>)
 80024b2:	f44f 62b9 	mov.w	r2, #1480	; 0x5c8
 80024b6:	639a      	str	r2, [r3, #56]	; 0x38
		FrontLeft = 1480;
 80024b8:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <atas+0x40>)
 80024ba:	f44f 62b9 	mov.w	r2, #1480	; 0x5c8
 80024be:	63da      	str	r2, [r3, #60]	; 0x3c
		BackRight = 1470;
 80024c0:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <atas+0x44>)
 80024c2:	f240 52be 	movw	r2, #1470	; 0x5be
 80024c6:	635a      	str	r2, [r3, #52]	; 0x34
		BackLeft = 1480;
 80024c8:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <atas+0x44>)
 80024ca:	f44f 62b9 	mov.w	r2, #1480	; 0x5c8
 80024ce:	639a      	str	r2, [r3, #56]	; 0x38
		CenterRight = 1600;
 80024d0:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <atas+0x48>)
 80024d2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80024d6:	635a      	str	r2, [r3, #52]	; 0x34
		CenterLeft = 1360;
 80024d8:	4b04      	ldr	r3, [pc, #16]	; (80024ec <atas+0x40>)
 80024da:	f44f 62aa 	mov.w	r2, #1360	; 0x550
 80024de:	635a      	str	r2, [r3, #52]	; 0x34
}
 80024e0:	bf00      	nop
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	40010400 	.word	0x40010400
 80024f0:	40014000 	.word	0x40014000
 80024f4:	40014400 	.word	0x40014400

080024f8 <bawah>:
void bawah(){
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0

		FrontRight = 1480;
 80024fc:	4b0e      	ldr	r3, [pc, #56]	; (8002538 <bawah+0x40>)
 80024fe:	f44f 62b9 	mov.w	r2, #1480	; 0x5c8
 8002502:	639a      	str	r2, [r3, #56]	; 0x38
		FrontLeft = 1480;
 8002504:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <bawah+0x40>)
 8002506:	f44f 62b9 	mov.w	r2, #1480	; 0x5c8
 800250a:	63da      	str	r2, [r3, #60]	; 0x3c
		BackRight = 1470;//b
 800250c:	4b0b      	ldr	r3, [pc, #44]	; (800253c <bawah+0x44>)
 800250e:	f240 52be 	movw	r2, #1470	; 0x5be
 8002512:	635a      	str	r2, [r3, #52]	; 0x34
		BackLeft = 1480;
 8002514:	4b09      	ldr	r3, [pc, #36]	; (800253c <bawah+0x44>)
 8002516:	f44f 62b9 	mov.w	r2, #1480	; 0x5c8
 800251a:	639a      	str	r2, [r3, #56]	; 0x38
		CenterRight = 1360;
 800251c:	4b08      	ldr	r3, [pc, #32]	; (8002540 <bawah+0x48>)
 800251e:	f44f 62aa 	mov.w	r2, #1360	; 0x550
 8002522:	635a      	str	r2, [r3, #52]	; 0x34
		CenterLeft = 1600;
 8002524:	4b04      	ldr	r3, [pc, #16]	; (8002538 <bawah+0x40>)
 8002526:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800252a:	635a      	str	r2, [r3, #52]	; 0x34

}
 800252c:	bf00      	nop
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	40010400 	.word	0x40010400
 800253c:	40014000 	.word	0x40014000
 8002540:	40014400 	.word	0x40014400

08002544 <pivotR>:
void pivotR(){
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0

		FrontRight = 1230;
 8002548:	4b0e      	ldr	r3, [pc, #56]	; (8002584 <pivotR+0x40>)
 800254a:	f240 42ce 	movw	r2, #1230	; 0x4ce
 800254e:	639a      	str	r2, [r3, #56]	; 0x38
		FrontLeft = 1730;
 8002550:	4b0c      	ldr	r3, [pc, #48]	; (8002584 <pivotR+0x40>)
 8002552:	f240 62c2 	movw	r2, #1730	; 0x6c2
 8002556:	63da      	str	r2, [r3, #60]	; 0x3c
		BackRight = 1220;
 8002558:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <pivotR+0x44>)
 800255a:	f240 42c4 	movw	r2, #1220	; 0x4c4
 800255e:	635a      	str	r2, [r3, #52]	; 0x34
		BackLeft = 1730;
 8002560:	4b09      	ldr	r3, [pc, #36]	; (8002588 <pivotR+0x44>)
 8002562:	f240 62c2 	movw	r2, #1730	; 0x6c2
 8002566:	639a      	str	r2, [r3, #56]	; 0x38
		CenterRight = 1470;
 8002568:	4b08      	ldr	r3, [pc, #32]	; (800258c <pivotR+0x48>)
 800256a:	f240 52be 	movw	r2, #1470	; 0x5be
 800256e:	635a      	str	r2, [r3, #52]	; 0x34
		CenterLeft = 1480;
 8002570:	4b04      	ldr	r3, [pc, #16]	; (8002584 <pivotR+0x40>)
 8002572:	f44f 62b9 	mov.w	r2, #1480	; 0x5c8
 8002576:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40010400 	.word	0x40010400
 8002588:	40014000 	.word	0x40014000
 800258c:	40014400 	.word	0x40014400

08002590 <stop>:
		BackRight = 1590;
		BackLeft = 1360;
		CenterRight = 1470;
		CenterLeft = 1480;
}
void stop(){
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
		FrontRight = 1480;
 8002594:	4b0e      	ldr	r3, [pc, #56]	; (80025d0 <stop+0x40>)
 8002596:	f44f 62b9 	mov.w	r2, #1480	; 0x5c8
 800259a:	639a      	str	r2, [r3, #56]	; 0x38
		FrontLeft = 1480;
 800259c:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <stop+0x40>)
 800259e:	f44f 62b9 	mov.w	r2, #1480	; 0x5c8
 80025a2:	63da      	str	r2, [r3, #60]	; 0x3c
		BackRight = 1470;
 80025a4:	4b0b      	ldr	r3, [pc, #44]	; (80025d4 <stop+0x44>)
 80025a6:	f240 52be 	movw	r2, #1470	; 0x5be
 80025aa:	635a      	str	r2, [r3, #52]	; 0x34
		BackLeft = 1480;
 80025ac:	4b09      	ldr	r3, [pc, #36]	; (80025d4 <stop+0x44>)
 80025ae:	f44f 62b9 	mov.w	r2, #1480	; 0x5c8
 80025b2:	639a      	str	r2, [r3, #56]	; 0x38
		CenterRight = 1470;
 80025b4:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <stop+0x48>)
 80025b6:	f240 52be 	movw	r2, #1470	; 0x5be
 80025ba:	635a      	str	r2, [r3, #52]	; 0x34
		CenterLeft = 1480;
 80025bc:	4b04      	ldr	r3, [pc, #16]	; (80025d0 <stop+0x40>)
 80025be:	f44f 62b9 	mov.w	r2, #1480	; 0x5c8
 80025c2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80025c4:	bf00      	nop
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	40010400 	.word	0x40010400
 80025d4:	40014000 	.word	0x40014000
 80025d8:	40014400 	.word	0x40014400

080025dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025e0:	f7fd ff6e 	bl	80004c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025e4:	f000 f896 	bl	8002714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025e8:	f000 fade 	bl	8002ba8 <MX_GPIO_Init>
  MX_TIM6_Init();
 80025ec:	f000 f8fc 	bl	80027e8 <MX_TIM6_Init>
  MX_TIM7_Init();
 80025f0:	f000 f930 	bl	8002854 <MX_TIM7_Init>
  MX_TIM10_Init();
 80025f4:	f000 fa8a 	bl	8002b0c <MX_TIM10_Init>
  MX_TIM9_Init();
 80025f8:	f000 fa1a 	bl	8002a30 <MX_TIM9_Init>
  MX_TIM8_Init();
 80025fc:	f000 f960 	bl	80028c0 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8002600:	2100      	movs	r1, #0
 8002602:	483e      	ldr	r0, [pc, #248]	; (80026fc <main+0x120>)
 8002604:	f7fe ff88 	bl	8001518 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8002608:	2100      	movs	r1, #0
 800260a:	483d      	ldr	r0, [pc, #244]	; (8002700 <main+0x124>)
 800260c:	f7fe ff84 	bl	8001518 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 8002610:	2104      	movs	r1, #4
 8002612:	483b      	ldr	r0, [pc, #236]	; (8002700 <main+0x124>)
 8002614:	f7fe ff80 	bl	8001518 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002618:	2100      	movs	r1, #0
 800261a:	483a      	ldr	r0, [pc, #232]	; (8002704 <main+0x128>)
 800261c:	f7fe ff7c 	bl	8001518 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002620:	2104      	movs	r1, #4
 8002622:	4838      	ldr	r0, [pc, #224]	; (8002704 <main+0x128>)
 8002624:	f7fe ff78 	bl	8001518 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8002628:	2108      	movs	r1, #8
 800262a:	4836      	ldr	r0, [pc, #216]	; (8002704 <main+0x128>)
 800262c:	f7fe ff74 	bl	8001518 <HAL_TIM_PWM_Start>
  CenterRight=1470;
 8002630:	4b35      	ldr	r3, [pc, #212]	; (8002708 <main+0x12c>)
 8002632:	f240 52be 	movw	r2, #1470	; 0x5be
 8002636:	635a      	str	r2, [r3, #52]	; 0x34
  CenterLeft=1480;
 8002638:	4b34      	ldr	r3, [pc, #208]	; (800270c <main+0x130>)
 800263a:	f44f 62b9 	mov.w	r2, #1480	; 0x5c8
 800263e:	635a      	str	r2, [r3, #52]	; 0x34
  FrontRight=1480;
 8002640:	4b32      	ldr	r3, [pc, #200]	; (800270c <main+0x130>)
 8002642:	f44f 62b9 	mov.w	r2, #1480	; 0x5c8
 8002646:	639a      	str	r2, [r3, #56]	; 0x38
  FrontLeft=1480;
 8002648:	4b30      	ldr	r3, [pc, #192]	; (800270c <main+0x130>)
 800264a:	f44f 62b9 	mov.w	r2, #1480	; 0x5c8
 800264e:	63da      	str	r2, [r3, #60]	; 0x3c
  BackRight=1470;
 8002650:	4b2f      	ldr	r3, [pc, #188]	; (8002710 <main+0x134>)
 8002652:	f240 52be 	movw	r2, #1470	; 0x5be
 8002656:	635a      	str	r2, [r3, #52]	; 0x34
  BackLeft=1480;
 8002658:	4b2d      	ldr	r3, [pc, #180]	; (8002710 <main+0x134>)
 800265a:	f44f 62b9 	mov.w	r2, #1480	; 0x5c8
 800265e:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(5000);
 8002660:	f241 3088 	movw	r0, #5000	; 0x1388
 8002664:	f7fd ff9e 	bl	80005a4 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	atas();
 8002668:	f7ff ff20 	bl	80024ac <atas>
	HAL_Delay(4000);
 800266c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002670:	f7fd ff98 	bl	80005a4 <HAL_Delay>
	stop();
 8002674:	f7ff ff8c 	bl	8002590 <stop>
	HAL_Delay(500);
 8002678:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800267c:	f7fd ff92 	bl	80005a4 <HAL_Delay>
	bawah();
 8002680:	f7ff ff3a 	bl	80024f8 <bawah>
	HAL_Delay(2500);
 8002684:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002688:	f7fd ff8c 	bl	80005a4 <HAL_Delay>
	stop();
 800268c:	f7ff ff80 	bl	8002590 <stop>
	HAL_Delay(3000);
 8002690:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002694:	f7fd ff86 	bl	80005a4 <HAL_Delay>
	maju();
 8002698:	f7ff febc 	bl	8002414 <maju>
	HAL_Delay(10000);
 800269c:	f242 7010 	movw	r0, #10000	; 0x2710
 80026a0:	f7fd ff80 	bl	80005a4 <HAL_Delay>
	stop();
 80026a4:	f7ff ff74 	bl	8002590 <stop>
	HAL_Delay(500);
 80026a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026ac:	f7fd ff7a 	bl	80005a4 <HAL_Delay>
	mundur();
 80026b0:	f7ff fed6 	bl	8002460 <mundur>
	HAL_Delay(1000);
 80026b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026b8:	f7fd ff74 	bl	80005a4 <HAL_Delay>
	stop();
 80026bc:	f7ff ff68 	bl	8002590 <stop>
	HAL_Delay(1000);
 80026c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026c4:	f7fd ff6e 	bl	80005a4 <HAL_Delay>
	pivotR();
 80026c8:	f7ff ff3c 	bl	8002544 <pivotR>
	HAL_Delay(2000);
 80026cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80026d0:	f7fd ff68 	bl	80005a4 <HAL_Delay>
	stop();
 80026d4:	f7ff ff5c 	bl	8002590 <stop>
	HAL_Delay(500);
 80026d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026dc:	f7fd ff62 	bl	80005a4 <HAL_Delay>
	maju();
 80026e0:	f7ff fe98 	bl	8002414 <maju>
	HAL_Delay(10000);
 80026e4:	f242 7010 	movw	r0, #10000	; 0x2710
 80026e8:	f7fd ff5c 	bl	80005a4 <HAL_Delay>
	stop();
 80026ec:	f7ff ff50 	bl	8002590 <stop>
	HAL_Delay(2000);
 80026f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80026f4:	f7fd ff56 	bl	80005a4 <HAL_Delay>
	atas();
 80026f8:	e7b6      	b.n	8002668 <main+0x8c>
 80026fa:	bf00      	nop
 80026fc:	20000074 	.word	0x20000074
 8002700:	20000104 	.word	0x20000104
 8002704:	2000002c 	.word	0x2000002c
 8002708:	40014400 	.word	0x40014400
 800270c:	40010400 	.word	0x40010400
 8002710:	40014000 	.word	0x40014000

08002714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b094      	sub	sp, #80	; 0x50
 8002718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800271a:	f107 0320 	add.w	r3, r7, #32
 800271e:	2230      	movs	r2, #48	; 0x30
 8002720:	2100      	movs	r1, #0
 8002722:	4618      	mov	r0, r3
 8002724:	f000 fc64 	bl	8002ff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002728:	f107 030c 	add.w	r3, r7, #12
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	605a      	str	r2, [r3, #4]
 8002732:	609a      	str	r2, [r3, #8]
 8002734:	60da      	str	r2, [r3, #12]
 8002736:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002738:	2300      	movs	r3, #0
 800273a:	60bb      	str	r3, [r7, #8]
 800273c:	4b28      	ldr	r3, [pc, #160]	; (80027e0 <SystemClock_Config+0xcc>)
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	4a27      	ldr	r2, [pc, #156]	; (80027e0 <SystemClock_Config+0xcc>)
 8002742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002746:	6413      	str	r3, [r2, #64]	; 0x40
 8002748:	4b25      	ldr	r3, [pc, #148]	; (80027e0 <SystemClock_Config+0xcc>)
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002750:	60bb      	str	r3, [r7, #8]
 8002752:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002754:	2300      	movs	r3, #0
 8002756:	607b      	str	r3, [r7, #4]
 8002758:	4b22      	ldr	r3, [pc, #136]	; (80027e4 <SystemClock_Config+0xd0>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a21      	ldr	r2, [pc, #132]	; (80027e4 <SystemClock_Config+0xd0>)
 800275e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002762:	6013      	str	r3, [r2, #0]
 8002764:	4b1f      	ldr	r3, [pc, #124]	; (80027e4 <SystemClock_Config+0xd0>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800276c:	607b      	str	r3, [r7, #4]
 800276e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002770:	2301      	movs	r3, #1
 8002772:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002774:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002778:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800277a:	2302      	movs	r3, #2
 800277c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800277e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002782:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002784:	2308      	movs	r3, #8
 8002786:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002788:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800278c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800278e:	2302      	movs	r3, #2
 8002790:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002792:	2307      	movs	r3, #7
 8002794:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002796:	f107 0320 	add.w	r3, r7, #32
 800279a:	4618      	mov	r0, r3
 800279c:	f7fe f9d4 	bl	8000b48 <HAL_RCC_OscConfig>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80027a6:	f000 fa43 	bl	8002c30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027aa:	230f      	movs	r3, #15
 80027ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027ae:	2302      	movs	r3, #2
 80027b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80027b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80027ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80027bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80027c2:	f107 030c 	add.w	r3, r7, #12
 80027c6:	2105      	movs	r1, #5
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7fe fc35 	bl	8001038 <HAL_RCC_ClockConfig>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80027d4:	f000 fa2c 	bl	8002c30 <Error_Handler>
  }
}
 80027d8:	bf00      	nop
 80027da:	3750      	adds	r7, #80	; 0x50
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40007000 	.word	0x40007000

080027e8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ee:	463b      	mov	r3, r7
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80027f6:	4b15      	ldr	r3, [pc, #84]	; (800284c <MX_TIM6_Init+0x64>)
 80027f8:	4a15      	ldr	r2, [pc, #84]	; (8002850 <MX_TIM6_Init+0x68>)
 80027fa:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1679;
 80027fc:	4b13      	ldr	r3, [pc, #76]	; (800284c <MX_TIM6_Init+0x64>)
 80027fe:	f240 628f 	movw	r2, #1679	; 0x68f
 8002802:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002804:	4b11      	ldr	r3, [pc, #68]	; (800284c <MX_TIM6_Init+0x64>)
 8002806:	2200      	movs	r2, #0
 8002808:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 800280a:	4b10      	ldr	r3, [pc, #64]	; (800284c <MX_TIM6_Init+0x64>)
 800280c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002810:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002812:	4b0e      	ldr	r3, [pc, #56]	; (800284c <MX_TIM6_Init+0x64>)
 8002814:	2200      	movs	r2, #0
 8002816:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002818:	480c      	ldr	r0, [pc, #48]	; (800284c <MX_TIM6_Init+0x64>)
 800281a:	f7fe fdd5 	bl	80013c8 <HAL_TIM_Base_Init>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002824:	f000 fa04 	bl	8002c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002828:	2300      	movs	r3, #0
 800282a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800282c:	2300      	movs	r3, #0
 800282e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002830:	463b      	mov	r3, r7
 8002832:	4619      	mov	r1, r3
 8002834:	4805      	ldr	r0, [pc, #20]	; (800284c <MX_TIM6_Init+0x64>)
 8002836:	f7ff fd0b 	bl	8002250 <HAL_TIMEx_MasterConfigSynchronization>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002840:	f000 f9f6 	bl	8002c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002844:	bf00      	nop
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	200000bc 	.word	0x200000bc
 8002850:	40001000 	.word	0x40001000

08002854 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800285a:	463b      	mov	r3, r7
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002862:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <MX_TIM7_Init+0x64>)
 8002864:	4a15      	ldr	r2, [pc, #84]	; (80028bc <MX_TIM7_Init+0x68>)
 8002866:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8002868:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <MX_TIM7_Init+0x64>)
 800286a:	2253      	movs	r2, #83	; 0x53
 800286c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800286e:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <MX_TIM7_Init+0x64>)
 8002870:	2200      	movs	r2, #0
 8002872:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8002874:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <MX_TIM7_Init+0x64>)
 8002876:	f240 32e7 	movw	r2, #999	; 0x3e7
 800287a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800287c:	4b0e      	ldr	r3, [pc, #56]	; (80028b8 <MX_TIM7_Init+0x64>)
 800287e:	2200      	movs	r2, #0
 8002880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002882:	480d      	ldr	r0, [pc, #52]	; (80028b8 <MX_TIM7_Init+0x64>)
 8002884:	f7fe fda0 	bl	80013c8 <HAL_TIM_Base_Init>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800288e:	f000 f9cf 	bl	8002c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002892:	2300      	movs	r3, #0
 8002894:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002896:	2300      	movs	r3, #0
 8002898:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800289a:	463b      	mov	r3, r7
 800289c:	4619      	mov	r1, r3
 800289e:	4806      	ldr	r0, [pc, #24]	; (80028b8 <MX_TIM7_Init+0x64>)
 80028a0:	f7ff fcd6 	bl	8002250 <HAL_TIMEx_MasterConfigSynchronization>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80028aa:	f000 f9c1 	bl	8002c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80028ae:	bf00      	nop
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	2000014c 	.word	0x2000014c
 80028bc:	40001400 	.word	0x40001400

080028c0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b096      	sub	sp, #88	; 0x58
 80028c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	605a      	str	r2, [r3, #4]
 80028d0:	609a      	str	r2, [r3, #8]
 80028d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	605a      	str	r2, [r3, #4]
 80028e8:	609a      	str	r2, [r3, #8]
 80028ea:	60da      	str	r2, [r3, #12]
 80028ec:	611a      	str	r2, [r3, #16]
 80028ee:	615a      	str	r2, [r3, #20]
 80028f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80028f2:	1d3b      	adds	r3, r7, #4
 80028f4:	2220      	movs	r2, #32
 80028f6:	2100      	movs	r1, #0
 80028f8:	4618      	mov	r0, r3
 80028fa:	f000 fb79 	bl	8002ff0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80028fe:	4b4a      	ldr	r3, [pc, #296]	; (8002a28 <MX_TIM8_Init+0x168>)
 8002900:	4a4a      	ldr	r2, [pc, #296]	; (8002a2c <MX_TIM8_Init+0x16c>)
 8002902:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168;
 8002904:	4b48      	ldr	r3, [pc, #288]	; (8002a28 <MX_TIM8_Init+0x168>)
 8002906:	22a8      	movs	r2, #168	; 0xa8
 8002908:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800290a:	4b47      	ldr	r3, [pc, #284]	; (8002a28 <MX_TIM8_Init+0x168>)
 800290c:	2200      	movs	r2, #0
 800290e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 20000;
 8002910:	4b45      	ldr	r3, [pc, #276]	; (8002a28 <MX_TIM8_Init+0x168>)
 8002912:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002916:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002918:	4b43      	ldr	r3, [pc, #268]	; (8002a28 <MX_TIM8_Init+0x168>)
 800291a:	2200      	movs	r2, #0
 800291c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800291e:	4b42      	ldr	r3, [pc, #264]	; (8002a28 <MX_TIM8_Init+0x168>)
 8002920:	2200      	movs	r2, #0
 8002922:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002924:	4b40      	ldr	r3, [pc, #256]	; (8002a28 <MX_TIM8_Init+0x168>)
 8002926:	2200      	movs	r2, #0
 8002928:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800292a:	483f      	ldr	r0, [pc, #252]	; (8002a28 <MX_TIM8_Init+0x168>)
 800292c:	f7fe fd4c 	bl	80013c8 <HAL_TIM_Base_Init>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002936:	f000 f97b 	bl	8002c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800293a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800293e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002940:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002944:	4619      	mov	r1, r3
 8002946:	4838      	ldr	r0, [pc, #224]	; (8002a28 <MX_TIM8_Init+0x168>)
 8002948:	f7ff f878 	bl	8001a3c <HAL_TIM_ConfigClockSource>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002952:	f000 f96d 	bl	8002c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002956:	4834      	ldr	r0, [pc, #208]	; (8002a28 <MX_TIM8_Init+0x168>)
 8002958:	f7fe fd85 	bl	8001466 <HAL_TIM_PWM_Init>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002962:	f000 f965 	bl	8002c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002966:	2300      	movs	r3, #0
 8002968:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800296a:	2300      	movs	r3, #0
 800296c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800296e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002972:	4619      	mov	r1, r3
 8002974:	482c      	ldr	r0, [pc, #176]	; (8002a28 <MX_TIM8_Init+0x168>)
 8002976:	f7ff fc6b 	bl	8002250 <HAL_TIMEx_MasterConfigSynchronization>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002980:	f000 f956 	bl	8002c30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002984:	2360      	movs	r3, #96	; 0x60
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002988:	2300      	movs	r3, #0
 800298a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800298c:	2300      	movs	r3, #0
 800298e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002990:	2300      	movs	r3, #0
 8002992:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002994:	2300      	movs	r3, #0
 8002996:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002998:	2300      	movs	r3, #0
 800299a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800299c:	2300      	movs	r3, #0
 800299e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029a4:	2200      	movs	r2, #0
 80029a6:	4619      	mov	r1, r3
 80029a8:	481f      	ldr	r0, [pc, #124]	; (8002a28 <MX_TIM8_Init+0x168>)
 80029aa:	f7fe ff85 	bl	80018b8 <HAL_TIM_PWM_ConfigChannel>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80029b4:	f000 f93c 	bl	8002c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80029b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029bc:	2204      	movs	r2, #4
 80029be:	4619      	mov	r1, r3
 80029c0:	4819      	ldr	r0, [pc, #100]	; (8002a28 <MX_TIM8_Init+0x168>)
 80029c2:	f7fe ff79 	bl	80018b8 <HAL_TIM_PWM_ConfigChannel>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80029cc:	f000 f930 	bl	8002c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80029d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029d4:	2208      	movs	r2, #8
 80029d6:	4619      	mov	r1, r3
 80029d8:	4813      	ldr	r0, [pc, #76]	; (8002a28 <MX_TIM8_Init+0x168>)
 80029da:	f7fe ff6d 	bl	80018b8 <HAL_TIM_PWM_ConfigChannel>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 80029e4:	f000 f924 	bl	8002c30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80029e8:	2300      	movs	r3, #0
 80029ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80029ec:	2300      	movs	r3, #0
 80029ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80029f0:	2300      	movs	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80029f4:	2300      	movs	r3, #0
 80029f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80029fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a00:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a02:	2300      	movs	r3, #0
 8002a04:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002a06:	1d3b      	adds	r3, r7, #4
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4807      	ldr	r0, [pc, #28]	; (8002a28 <MX_TIM8_Init+0x168>)
 8002a0c:	f7ff fc9c 	bl	8002348 <HAL_TIMEx_ConfigBreakDeadTime>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 8002a16:	f000 f90b 	bl	8002c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002a1a:	4803      	ldr	r0, [pc, #12]	; (8002a28 <MX_TIM8_Init+0x168>)
 8002a1c:	f000 f9be 	bl	8002d9c <HAL_TIM_MspPostInit>

}
 8002a20:	bf00      	nop
 8002a22:	3758      	adds	r7, #88	; 0x58
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	2000002c 	.word	0x2000002c
 8002a2c:	40010400 	.word	0x40010400

08002a30 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08c      	sub	sp, #48	; 0x30
 8002a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a36:	f107 0320 	add.w	r3, r7, #32
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	605a      	str	r2, [r3, #4]
 8002a40:	609a      	str	r2, [r3, #8]
 8002a42:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a44:	1d3b      	adds	r3, r7, #4
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	605a      	str	r2, [r3, #4]
 8002a4c:	609a      	str	r2, [r3, #8]
 8002a4e:	60da      	str	r2, [r3, #12]
 8002a50:	611a      	str	r2, [r3, #16]
 8002a52:	615a      	str	r2, [r3, #20]
 8002a54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002a56:	4b2b      	ldr	r3, [pc, #172]	; (8002b04 <MX_TIM9_Init+0xd4>)
 8002a58:	4a2b      	ldr	r2, [pc, #172]	; (8002b08 <MX_TIM9_Init+0xd8>)
 8002a5a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 168;
 8002a5c:	4b29      	ldr	r3, [pc, #164]	; (8002b04 <MX_TIM9_Init+0xd4>)
 8002a5e:	22a8      	movs	r2, #168	; 0xa8
 8002a60:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a62:	4b28      	ldr	r3, [pc, #160]	; (8002b04 <MX_TIM9_Init+0xd4>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 20000;
 8002a68:	4b26      	ldr	r3, [pc, #152]	; (8002b04 <MX_TIM9_Init+0xd4>)
 8002a6a:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002a6e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a70:	4b24      	ldr	r3, [pc, #144]	; (8002b04 <MX_TIM9_Init+0xd4>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a76:	4b23      	ldr	r3, [pc, #140]	; (8002b04 <MX_TIM9_Init+0xd4>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002a7c:	4821      	ldr	r0, [pc, #132]	; (8002b04 <MX_TIM9_Init+0xd4>)
 8002a7e:	f7fe fca3 	bl	80013c8 <HAL_TIM_Base_Init>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8002a88:	f000 f8d2 	bl	8002c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a90:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002a92:	f107 0320 	add.w	r3, r7, #32
 8002a96:	4619      	mov	r1, r3
 8002a98:	481a      	ldr	r0, [pc, #104]	; (8002b04 <MX_TIM9_Init+0xd4>)
 8002a9a:	f7fe ffcf 	bl	8001a3c <HAL_TIM_ConfigClockSource>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8002aa4:	f000 f8c4 	bl	8002c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002aa8:	4816      	ldr	r0, [pc, #88]	; (8002b04 <MX_TIM9_Init+0xd4>)
 8002aaa:	f7fe fcdc 	bl	8001466 <HAL_TIM_PWM_Init>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8002ab4:	f000 f8bc 	bl	8002c30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ab8:	2360      	movs	r3, #96	; 0x60
 8002aba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ac8:	1d3b      	adds	r3, r7, #4
 8002aca:	2200      	movs	r2, #0
 8002acc:	4619      	mov	r1, r3
 8002ace:	480d      	ldr	r0, [pc, #52]	; (8002b04 <MX_TIM9_Init+0xd4>)
 8002ad0:	f7fe fef2 	bl	80018b8 <HAL_TIM_PWM_ConfigChannel>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8002ada:	f000 f8a9 	bl	8002c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ade:	1d3b      	adds	r3, r7, #4
 8002ae0:	2204      	movs	r2, #4
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4807      	ldr	r0, [pc, #28]	; (8002b04 <MX_TIM9_Init+0xd4>)
 8002ae6:	f7fe fee7 	bl	80018b8 <HAL_TIM_PWM_ConfigChannel>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 8002af0:	f000 f89e 	bl	8002c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002af4:	4803      	ldr	r0, [pc, #12]	; (8002b04 <MX_TIM9_Init+0xd4>)
 8002af6:	f000 f951 	bl	8002d9c <HAL_TIM_MspPostInit>

}
 8002afa:	bf00      	nop
 8002afc:	3730      	adds	r7, #48	; 0x30
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	20000104 	.word	0x20000104
 8002b08:	40014000 	.word	0x40014000

08002b0c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b088      	sub	sp, #32
 8002b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b12:	1d3b      	adds	r3, r7, #4
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	609a      	str	r2, [r3, #8]
 8002b1c:	60da      	str	r2, [r3, #12]
 8002b1e:	611a      	str	r2, [r3, #16]
 8002b20:	615a      	str	r2, [r3, #20]
 8002b22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002b24:	4b1e      	ldr	r3, [pc, #120]	; (8002ba0 <MX_TIM10_Init+0x94>)
 8002b26:	4a1f      	ldr	r2, [pc, #124]	; (8002ba4 <MX_TIM10_Init+0x98>)
 8002b28:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168;
 8002b2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ba0 <MX_TIM10_Init+0x94>)
 8002b2c:	22a8      	movs	r2, #168	; 0xa8
 8002b2e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b30:	4b1b      	ldr	r3, [pc, #108]	; (8002ba0 <MX_TIM10_Init+0x94>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 20000;
 8002b36:	4b1a      	ldr	r3, [pc, #104]	; (8002ba0 <MX_TIM10_Init+0x94>)
 8002b38:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002b3c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b3e:	4b18      	ldr	r3, [pc, #96]	; (8002ba0 <MX_TIM10_Init+0x94>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b44:	4b16      	ldr	r3, [pc, #88]	; (8002ba0 <MX_TIM10_Init+0x94>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002b4a:	4815      	ldr	r0, [pc, #84]	; (8002ba0 <MX_TIM10_Init+0x94>)
 8002b4c:	f7fe fc3c 	bl	80013c8 <HAL_TIM_Base_Init>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8002b56:	f000 f86b 	bl	8002c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002b5a:	4811      	ldr	r0, [pc, #68]	; (8002ba0 <MX_TIM10_Init+0x94>)
 8002b5c:	f7fe fc83 	bl	8001466 <HAL_TIM_PWM_Init>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8002b66:	f000 f863 	bl	8002c30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b6a:	2360      	movs	r3, #96	; 0x60
 8002b6c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b72:	2300      	movs	r3, #0
 8002b74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b76:	2300      	movs	r3, #0
 8002b78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b7a:	1d3b      	adds	r3, r7, #4
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4807      	ldr	r0, [pc, #28]	; (8002ba0 <MX_TIM10_Init+0x94>)
 8002b82:	f7fe fe99 	bl	80018b8 <HAL_TIM_PWM_ConfigChannel>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8002b8c:	f000 f850 	bl	8002c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8002b90:	4803      	ldr	r0, [pc, #12]	; (8002ba0 <MX_TIM10_Init+0x94>)
 8002b92:	f000 f903 	bl	8002d9c <HAL_TIM_MspPostInit>

}
 8002b96:	bf00      	nop
 8002b98:	3720      	adds	r7, #32
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20000074 	.word	0x20000074
 8002ba4:	40014400 	.word	0x40014400

08002ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	4b1e      	ldr	r3, [pc, #120]	; (8002c2c <MX_GPIO_Init+0x84>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	4a1d      	ldr	r2, [pc, #116]	; (8002c2c <MX_GPIO_Init+0x84>)
 8002bb8:	f043 0310 	orr.w	r3, r3, #16
 8002bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bbe:	4b1b      	ldr	r3, [pc, #108]	; (8002c2c <MX_GPIO_Init+0x84>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	f003 0310 	and.w	r3, r3, #16
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60bb      	str	r3, [r7, #8]
 8002bce:	4b17      	ldr	r3, [pc, #92]	; (8002c2c <MX_GPIO_Init+0x84>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	4a16      	ldr	r2, [pc, #88]	; (8002c2c <MX_GPIO_Init+0x84>)
 8002bd4:	f043 0304 	orr.w	r3, r3, #4
 8002bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bda:	4b14      	ldr	r3, [pc, #80]	; (8002c2c <MX_GPIO_Init+0x84>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	f003 0304 	and.w	r3, r3, #4
 8002be2:	60bb      	str	r3, [r7, #8]
 8002be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002be6:	2300      	movs	r3, #0
 8002be8:	607b      	str	r3, [r7, #4]
 8002bea:	4b10      	ldr	r3, [pc, #64]	; (8002c2c <MX_GPIO_Init+0x84>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	4a0f      	ldr	r2, [pc, #60]	; (8002c2c <MX_GPIO_Init+0x84>)
 8002bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf6:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <MX_GPIO_Init+0x84>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfe:	607b      	str	r3, [r7, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	603b      	str	r3, [r7, #0]
 8002c06:	4b09      	ldr	r3, [pc, #36]	; (8002c2c <MX_GPIO_Init+0x84>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	4a08      	ldr	r2, [pc, #32]	; (8002c2c <MX_GPIO_Init+0x84>)
 8002c0c:	f043 0302 	orr.w	r3, r3, #2
 8002c10:	6313      	str	r3, [r2, #48]	; 0x30
 8002c12:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <MX_GPIO_Init+0x84>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	603b      	str	r3, [r7, #0]
 8002c1c:	683b      	ldr	r3, [r7, #0]

}
 8002c1e:	bf00      	nop
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	40023800 	.word	0x40023800

08002c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c34:	b672      	cpsid	i
}
 8002c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c38:	e7fe      	b.n	8002c38 <Error_Handler+0x8>
	...

08002c3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	607b      	str	r3, [r7, #4]
 8002c46:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <HAL_MspInit+0x4c>)
 8002c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4a:	4a0f      	ldr	r2, [pc, #60]	; (8002c88 <HAL_MspInit+0x4c>)
 8002c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c50:	6453      	str	r3, [r2, #68]	; 0x44
 8002c52:	4b0d      	ldr	r3, [pc, #52]	; (8002c88 <HAL_MspInit+0x4c>)
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c5a:	607b      	str	r3, [r7, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	603b      	str	r3, [r7, #0]
 8002c62:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <HAL_MspInit+0x4c>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	4a08      	ldr	r2, [pc, #32]	; (8002c88 <HAL_MspInit+0x4c>)
 8002c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c6e:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <HAL_MspInit+0x4c>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002c7a:	2007      	movs	r0, #7
 8002c7c:	f7fd fd86 	bl	800078c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c80:	bf00      	nop
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40023800 	.word	0x40023800

08002c8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a3a      	ldr	r2, [pc, #232]	; (8002d84 <HAL_TIM_Base_MspInit+0xf8>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d116      	bne.n	8002ccc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61fb      	str	r3, [r7, #28]
 8002ca2:	4b39      	ldr	r3, [pc, #228]	; (8002d88 <HAL_TIM_Base_MspInit+0xfc>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	4a38      	ldr	r2, [pc, #224]	; (8002d88 <HAL_TIM_Base_MspInit+0xfc>)
 8002ca8:	f043 0310 	orr.w	r3, r3, #16
 8002cac:	6413      	str	r3, [r2, #64]	; 0x40
 8002cae:	4b36      	ldr	r3, [pc, #216]	; (8002d88 <HAL_TIM_Base_MspInit+0xfc>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	f003 0310 	and.w	r3, r3, #16
 8002cb6:	61fb      	str	r3, [r7, #28]
 8002cb8:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	2036      	movs	r0, #54	; 0x36
 8002cc0:	f7fd fd6f 	bl	80007a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002cc4:	2036      	movs	r0, #54	; 0x36
 8002cc6:	f7fd fd88 	bl	80007da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002cca:	e056      	b.n	8002d7a <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM7)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a2e      	ldr	r2, [pc, #184]	; (8002d8c <HAL_TIM_Base_MspInit+0x100>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d116      	bne.n	8002d04 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61bb      	str	r3, [r7, #24]
 8002cda:	4b2b      	ldr	r3, [pc, #172]	; (8002d88 <HAL_TIM_Base_MspInit+0xfc>)
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	4a2a      	ldr	r2, [pc, #168]	; (8002d88 <HAL_TIM_Base_MspInit+0xfc>)
 8002ce0:	f043 0320 	orr.w	r3, r3, #32
 8002ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ce6:	4b28      	ldr	r3, [pc, #160]	; (8002d88 <HAL_TIM_Base_MspInit+0xfc>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	f003 0320 	and.w	r3, r3, #32
 8002cee:	61bb      	str	r3, [r7, #24]
 8002cf0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	2037      	movs	r0, #55	; 0x37
 8002cf8:	f7fd fd53 	bl	80007a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002cfc:	2037      	movs	r0, #55	; 0x37
 8002cfe:	f7fd fd6c 	bl	80007da <HAL_NVIC_EnableIRQ>
}
 8002d02:	e03a      	b.n	8002d7a <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM8)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a21      	ldr	r2, [pc, #132]	; (8002d90 <HAL_TIM_Base_MspInit+0x104>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d10e      	bne.n	8002d2c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]
 8002d12:	4b1d      	ldr	r3, [pc, #116]	; (8002d88 <HAL_TIM_Base_MspInit+0xfc>)
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	4a1c      	ldr	r2, [pc, #112]	; (8002d88 <HAL_TIM_Base_MspInit+0xfc>)
 8002d18:	f043 0302 	orr.w	r3, r3, #2
 8002d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d1e:	4b1a      	ldr	r3, [pc, #104]	; (8002d88 <HAL_TIM_Base_MspInit+0xfc>)
 8002d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	697b      	ldr	r3, [r7, #20]
}
 8002d2a:	e026      	b.n	8002d7a <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM9)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a18      	ldr	r2, [pc, #96]	; (8002d94 <HAL_TIM_Base_MspInit+0x108>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d10e      	bne.n	8002d54 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	4b13      	ldr	r3, [pc, #76]	; (8002d88 <HAL_TIM_Base_MspInit+0xfc>)
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3e:	4a12      	ldr	r2, [pc, #72]	; (8002d88 <HAL_TIM_Base_MspInit+0xfc>)
 8002d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d44:	6453      	str	r3, [r2, #68]	; 0x44
 8002d46:	4b10      	ldr	r3, [pc, #64]	; (8002d88 <HAL_TIM_Base_MspInit+0xfc>)
 8002d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d4e:	613b      	str	r3, [r7, #16]
 8002d50:	693b      	ldr	r3, [r7, #16]
}
 8002d52:	e012      	b.n	8002d7a <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM10)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a0f      	ldr	r2, [pc, #60]	; (8002d98 <HAL_TIM_Base_MspInit+0x10c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d10d      	bne.n	8002d7a <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	4b09      	ldr	r3, [pc, #36]	; (8002d88 <HAL_TIM_Base_MspInit+0xfc>)
 8002d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d66:	4a08      	ldr	r2, [pc, #32]	; (8002d88 <HAL_TIM_Base_MspInit+0xfc>)
 8002d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d6e:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <HAL_TIM_Base_MspInit+0xfc>)
 8002d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	68fb      	ldr	r3, [r7, #12]
}
 8002d7a:	bf00      	nop
 8002d7c:	3720      	adds	r7, #32
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40001000 	.word	0x40001000
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	40001400 	.word	0x40001400
 8002d90:	40010400 	.word	0x40010400
 8002d94:	40014000 	.word	0x40014000
 8002d98:	40014400 	.word	0x40014400

08002d9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b08a      	sub	sp, #40	; 0x28
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da4:	f107 0314 	add.w	r3, r7, #20
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	605a      	str	r2, [r3, #4]
 8002dae:	609a      	str	r2, [r3, #8]
 8002db0:	60da      	str	r2, [r3, #12]
 8002db2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a37      	ldr	r2, [pc, #220]	; (8002e98 <HAL_TIM_MspPostInit+0xfc>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d11f      	bne.n	8002dfe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	613b      	str	r3, [r7, #16]
 8002dc2:	4b36      	ldr	r3, [pc, #216]	; (8002e9c <HAL_TIM_MspPostInit+0x100>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	4a35      	ldr	r2, [pc, #212]	; (8002e9c <HAL_TIM_MspPostInit+0x100>)
 8002dc8:	f043 0304 	orr.w	r3, r3, #4
 8002dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dce:	4b33      	ldr	r3, [pc, #204]	; (8002e9c <HAL_TIM_MspPostInit+0x100>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	f003 0304 	and.w	r3, r3, #4
 8002dd6:	613b      	str	r3, [r7, #16]
 8002dd8:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8002dda:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de0:	2302      	movs	r3, #2
 8002de2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de8:	2300      	movs	r3, #0
 8002dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002dec:	2303      	movs	r3, #3
 8002dee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002df0:	f107 0314 	add.w	r3, r7, #20
 8002df4:	4619      	mov	r1, r3
 8002df6:	482a      	ldr	r0, [pc, #168]	; (8002ea0 <HAL_TIM_MspPostInit+0x104>)
 8002df8:	f7fd fd0a 	bl	8000810 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8002dfc:	e047      	b.n	8002e8e <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM9)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a28      	ldr	r2, [pc, #160]	; (8002ea4 <HAL_TIM_MspPostInit+0x108>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d11e      	bne.n	8002e46 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	4b23      	ldr	r3, [pc, #140]	; (8002e9c <HAL_TIM_MspPostInit+0x100>)
 8002e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e10:	4a22      	ldr	r2, [pc, #136]	; (8002e9c <HAL_TIM_MspPostInit+0x100>)
 8002e12:	f043 0310 	orr.w	r3, r3, #16
 8002e16:	6313      	str	r3, [r2, #48]	; 0x30
 8002e18:	4b20      	ldr	r3, [pc, #128]	; (8002e9c <HAL_TIM_MspPostInit+0x100>)
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1c:	f003 0310 	and.w	r3, r3, #16
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002e24:	2360      	movs	r3, #96	; 0x60
 8002e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e28:	2302      	movs	r3, #2
 8002e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e30:	2300      	movs	r3, #0
 8002e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002e34:	2303      	movs	r3, #3
 8002e36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e38:	f107 0314 	add.w	r3, r7, #20
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	481a      	ldr	r0, [pc, #104]	; (8002ea8 <HAL_TIM_MspPostInit+0x10c>)
 8002e40:	f7fd fce6 	bl	8000810 <HAL_GPIO_Init>
}
 8002e44:	e023      	b.n	8002e8e <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM10)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a18      	ldr	r2, [pc, #96]	; (8002eac <HAL_TIM_MspPostInit+0x110>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d11e      	bne.n	8002e8e <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e50:	2300      	movs	r3, #0
 8002e52:	60bb      	str	r3, [r7, #8]
 8002e54:	4b11      	ldr	r3, [pc, #68]	; (8002e9c <HAL_TIM_MspPostInit+0x100>)
 8002e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e58:	4a10      	ldr	r2, [pc, #64]	; (8002e9c <HAL_TIM_MspPostInit+0x100>)
 8002e5a:	f043 0302 	orr.w	r3, r3, #2
 8002e5e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e60:	4b0e      	ldr	r3, [pc, #56]	; (8002e9c <HAL_TIM_MspPostInit+0x100>)
 8002e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e72:	2302      	movs	r3, #2
 8002e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e76:	2300      	movs	r3, #0
 8002e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e82:	f107 0314 	add.w	r3, r7, #20
 8002e86:	4619      	mov	r1, r3
 8002e88:	4809      	ldr	r0, [pc, #36]	; (8002eb0 <HAL_TIM_MspPostInit+0x114>)
 8002e8a:	f7fd fcc1 	bl	8000810 <HAL_GPIO_Init>
}
 8002e8e:	bf00      	nop
 8002e90:	3728      	adds	r7, #40	; 0x28
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40010400 	.word	0x40010400
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	40020800 	.word	0x40020800
 8002ea4:	40014000 	.word	0x40014000
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	40014400 	.word	0x40014400
 8002eb0:	40020400 	.word	0x40020400

08002eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002eb8:	e7fe      	b.n	8002eb8 <NMI_Handler+0x4>

08002eba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ebe:	e7fe      	b.n	8002ebe <HardFault_Handler+0x4>

08002ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ec4:	e7fe      	b.n	8002ec4 <MemManage_Handler+0x4>

08002ec6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002eca:	e7fe      	b.n	8002eca <BusFault_Handler+0x4>

08002ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ed0:	e7fe      	b.n	8002ed0 <UsageFault_Handler+0x4>

08002ed2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ed6:	bf00      	nop
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ee4:	bf00      	nop
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ef2:	bf00      	nop
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f00:	f7fd fb30 	bl	8000564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f04:	bf00      	nop
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f0c:	4802      	ldr	r0, [pc, #8]	; (8002f18 <TIM6_DAC_IRQHandler+0x10>)
 8002f0e:	f7fe fbcb 	bl	80016a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f12:	bf00      	nop
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	200000bc 	.word	0x200000bc

08002f1c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002f20:	4802      	ldr	r0, [pc, #8]	; (8002f2c <TIM7_IRQHandler+0x10>)
 8002f22:	f7fe fbc1 	bl	80016a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002f26:	bf00      	nop
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	2000014c 	.word	0x2000014c

08002f30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f34:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <SystemInit+0x20>)
 8002f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3a:	4a05      	ldr	r2, [pc, #20]	; (8002f50 <SystemInit+0x20>)
 8002f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f44:	bf00      	nop
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	e000ed00 	.word	0xe000ed00

08002f54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f58:	480d      	ldr	r0, [pc, #52]	; (8002f90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f5a:	490e      	ldr	r1, [pc, #56]	; (8002f94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f5c:	4a0e      	ldr	r2, [pc, #56]	; (8002f98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f60:	e002      	b.n	8002f68 <LoopCopyDataInit>

08002f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f66:	3304      	adds	r3, #4

08002f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f6c:	d3f9      	bcc.n	8002f62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f6e:	4a0b      	ldr	r2, [pc, #44]	; (8002f9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f70:	4c0b      	ldr	r4, [pc, #44]	; (8002fa0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f74:	e001      	b.n	8002f7a <LoopFillZerobss>

08002f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f78:	3204      	adds	r2, #4

08002f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f7c:	d3fb      	bcc.n	8002f76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f7e:	f7ff ffd7 	bl	8002f30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f82:	f000 f811 	bl	8002fa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f86:	f7ff fb29 	bl	80025dc <main>
  bx  lr    
 8002f8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f94:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002f98:	08003038 	.word	0x08003038
  ldr r2, =_sbss
 8002f9c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002fa0:	20000194 	.word	0x20000194

08002fa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fa4:	e7fe      	b.n	8002fa4 <ADC_IRQHandler>
	...

08002fa8 <__libc_init_array>:
 8002fa8:	b570      	push	{r4, r5, r6, lr}
 8002faa:	4d0d      	ldr	r5, [pc, #52]	; (8002fe0 <__libc_init_array+0x38>)
 8002fac:	4c0d      	ldr	r4, [pc, #52]	; (8002fe4 <__libc_init_array+0x3c>)
 8002fae:	1b64      	subs	r4, r4, r5
 8002fb0:	10a4      	asrs	r4, r4, #2
 8002fb2:	2600      	movs	r6, #0
 8002fb4:	42a6      	cmp	r6, r4
 8002fb6:	d109      	bne.n	8002fcc <__libc_init_array+0x24>
 8002fb8:	4d0b      	ldr	r5, [pc, #44]	; (8002fe8 <__libc_init_array+0x40>)
 8002fba:	4c0c      	ldr	r4, [pc, #48]	; (8002fec <__libc_init_array+0x44>)
 8002fbc:	f000 f820 	bl	8003000 <_init>
 8002fc0:	1b64      	subs	r4, r4, r5
 8002fc2:	10a4      	asrs	r4, r4, #2
 8002fc4:	2600      	movs	r6, #0
 8002fc6:	42a6      	cmp	r6, r4
 8002fc8:	d105      	bne.n	8002fd6 <__libc_init_array+0x2e>
 8002fca:	bd70      	pop	{r4, r5, r6, pc}
 8002fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fd0:	4798      	blx	r3
 8002fd2:	3601      	adds	r6, #1
 8002fd4:	e7ee      	b.n	8002fb4 <__libc_init_array+0xc>
 8002fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fda:	4798      	blx	r3
 8002fdc:	3601      	adds	r6, #1
 8002fde:	e7f2      	b.n	8002fc6 <__libc_init_array+0x1e>
 8002fe0:	08003030 	.word	0x08003030
 8002fe4:	08003030 	.word	0x08003030
 8002fe8:	08003030 	.word	0x08003030
 8002fec:	08003034 	.word	0x08003034

08002ff0 <memset>:
 8002ff0:	4402      	add	r2, r0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d100      	bne.n	8002ffa <memset+0xa>
 8002ff8:	4770      	bx	lr
 8002ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8002ffe:	e7f9      	b.n	8002ff4 <memset+0x4>

08003000 <_init>:
 8003000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003002:	bf00      	nop
 8003004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003006:	bc08      	pop	{r3}
 8003008:	469e      	mov	lr, r3
 800300a:	4770      	bx	lr

0800300c <_fini>:
 800300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300e:	bf00      	nop
 8003010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003012:	bc08      	pop	{r3}
 8003014:	469e      	mov	lr, r3
 8003016:	4770      	bx	lr
